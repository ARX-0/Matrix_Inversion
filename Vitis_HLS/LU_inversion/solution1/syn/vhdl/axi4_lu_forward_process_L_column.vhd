-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi4_lu_forward_process_L_column is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_01 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_02 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_03 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    L_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_1_o_ap_vld : OUT STD_LOGIC;
    L_14_i : IN STD_LOGIC_VECTOR (31 downto 0);
    L_14_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_14_o_ap_vld : OUT STD_LOGIC;
    L_15_i : IN STD_LOGIC_VECTOR (31 downto 0);
    L_15_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_15_o_ap_vld : OUT STD_LOGIC;
    L_16_i : IN STD_LOGIC_VECTOR (31 downto 0);
    L_16_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_16_o_ap_vld : OUT STD_LOGIC;
    L_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    L_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_2_o_ap_vld : OUT STD_LOGIC;
    L_27_i : IN STD_LOGIC_VECTOR (31 downto 0);
    L_27_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_27_o_ap_vld : OUT STD_LOGIC;
    L_28_i : IN STD_LOGIC_VECTOR (31 downto 0);
    L_28_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_28_o_ap_vld : OUT STD_LOGIC;
    L_29_i : IN STD_LOGIC_VECTOR (31 downto 0);
    L_29_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_29_o_ap_vld : OUT STD_LOGIC;
    L_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_3_ap_vld : OUT STD_LOGIC;
    L_310 : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_310_ap_vld : OUT STD_LOGIC;
    L_311 : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_311_ap_vld : OUT STD_LOGIC;
    L_312 : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_312_ap_vld : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
    k : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of axi4_lu_forward_process_L_column is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_read_read_fu_120_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_470_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_728 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln66_fu_502_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln66_reg_756 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal A_addr_reg_763 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_528_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_538_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_773 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_552_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln69_fu_571_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln69_reg_783 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln69_fu_583_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln69_reg_791 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_fu_589_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_796 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_639_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal A_load_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sub_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal p_reg_369 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln66_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln73_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_116 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal add_ln66_fu_658_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln66_fu_490_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal k_cast_fu_418_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_428_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_442_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_456_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_470_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_422_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln66_1_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_516_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln69_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_589_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_606_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_617_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_628_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_606_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_617_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_628_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_639_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln69_1_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal tmp_fu_470_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_470_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_470_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_589_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_589_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_589_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_639_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_639_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_639_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component axi4_lu_forward_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axi4_lu_forward_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axi4_lu_forward_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axi4_lu_forward_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axi4_lu_forward_sparsemux_7_2_32_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axi4_lu_forward_sparsemux_7_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    faddfsub_32ns_32ns_32_5_full_dsp_1_U61 : component axi4_lu_forward_faddfsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_392_p0,
        din1 => grp_fu_392_p1,
        opcode => grp_fu_392_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_392_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U62 : component axi4_lu_forward_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_796,
        din1 => tmp_3_reg_801,
        ce => ap_const_logic_1,
        dout => grp_fu_398_p2);

    fdiv_32ns_32ns_32_16_no_dsp_1_U63 : component axi4_lu_forward_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_reg_821,
        din1 => tmp_reg_728,
        ce => ap_const_logic_1,
        dout => grp_fu_402_p2);

    mux_4_2_32_1_1_U64 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_9_fu_428_p1,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        din4 => k,
        dout => tmp_9_fu_428_p6);

    mux_4_2_32_1_1_U65 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_s_fu_442_p1,
        din1 => p_read5,
        din2 => p_read6,
        din3 => p_read7,
        din4 => k,
        dout => tmp_s_fu_442_p6);

    mux_4_2_32_1_1_U66 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_1_fu_456_p1,
        din1 => p_read9,
        din2 => p_read10,
        din3 => p_read11,
        din4 => k,
        dout => tmp_1_fu_456_p6);

    sparsemux_7_2_32_1_1_x_U67 : component axi4_lu_forward_sparsemux_7_2_32_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "01",
        din0_WIDTH => 32,
        CASE1 => "10",
        din1_WIDTH => 32,
        CASE2 => "11",
        din2_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_9_fu_428_p6,
        din1 => tmp_s_fu_442_p6,
        din2 => tmp_1_fu_456_p6,
        def => tmp_fu_470_p7,
        sel => k,
        dout => tmp_fu_470_p9);

    mux_4_2_32_1_1_U68 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => L_0,
        din1 => L_01,
        din2 => L_02,
        din3 => L_03,
        din4 => trunc_ln66_fu_502_p1,
        dout => tmp_4_fu_528_p6);

    mux_4_2_32_1_1_U69 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => L_1_i,
        din1 => L_14_i,
        din2 => L_15_i,
        din3 => L_16_i,
        din4 => trunc_ln66_fu_502_p1,
        dout => tmp_5_fu_538_p6);

    mux_4_2_32_1_1_U70 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => L_2_i,
        din1 => L_27_i,
        din2 => L_28_i,
        din3 => L_29_i,
        din4 => trunc_ln66_fu_502_p1,
        dout => tmp_6_fu_552_p6);

    sparsemux_7_2_32_1_1_U71 : component axi4_lu_forward_sparsemux_7_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_4_reg_768,
        din1 => tmp_5_reg_773,
        din2 => tmp_6_reg_778,
        def => tmp_2_fu_589_p7,
        sel => p_reg_369,
        dout => tmp_2_fu_589_p9);

    mux_4_2_32_1_1_U72 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => tmp_7_fu_606_p4,
        din4 => p_reg_369,
        dout => tmp_7_fu_606_p6);

    mux_4_2_32_1_1_U73 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => p_read4,
        din1 => p_read5,
        din2 => p_read6,
        din3 => tmp_8_fu_617_p4,
        din4 => p_reg_369,
        dout => tmp_8_fu_617_p6);

    mux_4_2_32_1_1_U74 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => p_read8,
        din1 => p_read9,
        din2 => p_read10,
        din3 => tmp_11_fu_628_p4,
        din4 => p_reg_369,
        dout => tmp_11_fu_628_p6);

    sparsemux_7_2_32_1_1_x_U75 : component axi4_lu_forward_sparsemux_7_2_32_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "01",
        din0_WIDTH => 32,
        CASE1 => "10",
        din1_WIDTH => 32,
        CASE2 => "11",
        din2_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_7_fu_606_p6,
        din1 => tmp_8_fu_617_p6,
        din2 => tmp_11_fu_628_p6,
        def => tmp_3_fu_639_p7,
        sel => k,
        dout => tmp_3_fu_639_p9);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_1_fu_116 <= zext_ln66_fu_490_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                i_1_fu_116 <= add_ln66_fu_658_p2;
            end if; 
        end if;
    end process;

    p_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_510_p2 = ap_const_lv1_0))) then 
                p_reg_369 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_reg_369 <= add_ln69_reg_791;
            end if; 
        end if;
    end process;

    sum_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_510_p2 = ap_const_lv1_0))) then 
                sum_reg_380 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                sum_reg_380 <= grp_fu_392_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                A_addr_reg_763 <= zext_ln73_fu_523_p1(4 - 1 downto 0);
                select_ln69_reg_783 <= select_ln69_fu_571_p3;
                tmp_4_reg_768 <= tmp_4_fu_528_p6;
                tmp_5_reg_773 <= tmp_5_fu_538_p6;
                tmp_6_reg_778 <= tmp_6_fu_552_p6;
                trunc_ln66_reg_756 <= trunc_ln66_fu_502_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                A_load_reg_816 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln69_reg_791 <= add_ln69_fu_583_p2;
                tmp_2_reg_796 <= tmp_2_fu_589_p9;
                tmp_3_reg_801 <= tmp_3_fu_639_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_reg_806 <= grp_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                sub_reg_821 <= grp_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_reg_728 <= tmp_fu_470_p9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln66_fu_510_p2, icmp_ln69_1_fu_578_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_510_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln69_1_fu_578_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= A_addr_reg_763;

    A_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_14_o_assign_proc : process(L_14_i, k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state2, icmp_ln66_fu_510_p2, ap_CS_fsm_state34, grp_fu_402_p2)
    begin
        if ((k_read_read_fu_120_p2 = ap_const_lv2_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_1))) then 
                L_14_o <= grp_fu_402_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_510_p2 = ap_const_lv1_1))) then 
                L_14_o <= ap_const_lv32_3F800000;
            else 
                L_14_o <= L_14_i;
            end if;
        else 
            L_14_o <= L_14_i;
        end if; 
    end process;


    L_14_o_ap_vld_assign_proc : process(k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state2, icmp_ln66_fu_510_p2, ap_CS_fsm_state34)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_1) and (k_read_read_fu_120_p2 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_510_p2 = ap_const_lv1_1) and (k_read_read_fu_120_p2 = ap_const_lv2_1)))) then 
            L_14_o_ap_vld <= ap_const_logic_1;
        else 
            L_14_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    L_15_o_assign_proc : process(L_15_i, k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34, grp_fu_402_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_2) and (k_read_read_fu_120_p2 = ap_const_lv2_1))) then 
            L_15_o <= grp_fu_402_p2;
        else 
            L_15_o <= L_15_i;
        end if; 
    end process;


    L_15_o_ap_vld_assign_proc : process(k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_2) and (k_read_read_fu_120_p2 = ap_const_lv2_1))) then 
            L_15_o_ap_vld <= ap_const_logic_1;
        else 
            L_15_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    L_16_o_assign_proc : process(L_16_i, k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34, grp_fu_402_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_3) and (k_read_read_fu_120_p2 = ap_const_lv2_1))) then 
            L_16_o <= grp_fu_402_p2;
        else 
            L_16_o <= L_16_i;
        end if; 
    end process;


    L_16_o_ap_vld_assign_proc : process(k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_3) and (k_read_read_fu_120_p2 = ap_const_lv2_1))) then 
            L_16_o_ap_vld <= ap_const_logic_1;
        else 
            L_16_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    L_1_o_assign_proc : process(L_1_i, k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34, grp_fu_402_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_0) and (k_read_read_fu_120_p2 = ap_const_lv2_1))) then 
            L_1_o <= grp_fu_402_p2;
        else 
            L_1_o <= L_1_i;
        end if; 
    end process;


    L_1_o_ap_vld_assign_proc : process(k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_0) and (k_read_read_fu_120_p2 = ap_const_lv2_1))) then 
            L_1_o_ap_vld <= ap_const_logic_1;
        else 
            L_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    L_27_o_assign_proc : process(L_27_i, k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34, grp_fu_402_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_1) and (k_read_read_fu_120_p2 = ap_const_lv2_2))) then 
            L_27_o <= grp_fu_402_p2;
        else 
            L_27_o <= L_27_i;
        end if; 
    end process;


    L_27_o_ap_vld_assign_proc : process(k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_1) and (k_read_read_fu_120_p2 = ap_const_lv2_2))) then 
            L_27_o_ap_vld <= ap_const_logic_1;
        else 
            L_27_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    L_28_o_assign_proc : process(L_28_i, k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state2, icmp_ln66_fu_510_p2, ap_CS_fsm_state34, grp_fu_402_p2)
    begin
        if ((k_read_read_fu_120_p2 = ap_const_lv2_2)) then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_2))) then 
                L_28_o <= grp_fu_402_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_510_p2 = ap_const_lv1_1))) then 
                L_28_o <= ap_const_lv32_3F800000;
            else 
                L_28_o <= L_28_i;
            end if;
        else 
            L_28_o <= L_28_i;
        end if; 
    end process;


    L_28_o_ap_vld_assign_proc : process(k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state2, icmp_ln66_fu_510_p2, ap_CS_fsm_state34)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_2) and (k_read_read_fu_120_p2 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_510_p2 = ap_const_lv1_1) and (k_read_read_fu_120_p2 = ap_const_lv2_2)))) then 
            L_28_o_ap_vld <= ap_const_logic_1;
        else 
            L_28_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    L_29_o_assign_proc : process(L_29_i, k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34, grp_fu_402_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_3) and (k_read_read_fu_120_p2 = ap_const_lv2_2))) then 
            L_29_o <= grp_fu_402_p2;
        else 
            L_29_o <= L_29_i;
        end if; 
    end process;


    L_29_o_ap_vld_assign_proc : process(k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_3) and (k_read_read_fu_120_p2 = ap_const_lv2_2))) then 
            L_29_o_ap_vld <= ap_const_logic_1;
        else 
            L_29_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    L_2_o_assign_proc : process(L_2_i, k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34, grp_fu_402_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_0) and (k_read_read_fu_120_p2 = ap_const_lv2_2))) then 
            L_2_o <= grp_fu_402_p2;
        else 
            L_2_o <= L_2_i;
        end if; 
    end process;


    L_2_o_ap_vld_assign_proc : process(k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_0) and (k_read_read_fu_120_p2 = ap_const_lv2_2))) then 
            L_2_o_ap_vld <= ap_const_logic_1;
        else 
            L_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    L_3 <= grp_fu_402_p2;
    L_310 <= grp_fu_402_p2;

    L_310_ap_vld_assign_proc : process(k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34)
    begin
        if ((not((k_read_read_fu_120_p2 = ap_const_lv2_2)) and not((k_read_read_fu_120_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_1))) then 
            L_310_ap_vld <= ap_const_logic_1;
        else 
            L_310_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    L_311 <= grp_fu_402_p2;

    L_311_ap_vld_assign_proc : process(k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34)
    begin
        if ((not((k_read_read_fu_120_p2 = ap_const_lv2_2)) and not((k_read_read_fu_120_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_2))) then 
            L_311_ap_vld <= ap_const_logic_1;
        else 
            L_311_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    L_312_assign_proc : process(k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state2, icmp_ln66_fu_510_p2, ap_CS_fsm_state34, grp_fu_402_p2)
    begin
        if ((not((k_read_read_fu_120_p2 = ap_const_lv2_2)) and not((k_read_read_fu_120_p2 = ap_const_lv2_1)))) then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_3))) then 
                L_312 <= grp_fu_402_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_510_p2 = ap_const_lv1_1))) then 
                L_312 <= ap_const_lv32_3F800000;
            else 
                L_312 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            L_312 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_312_ap_vld_assign_proc : process(k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state2, icmp_ln66_fu_510_p2, ap_CS_fsm_state34)
    begin
        if (((not((k_read_read_fu_120_p2 = ap_const_lv2_2)) and not((k_read_read_fu_120_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_3)) or (not((k_read_read_fu_120_p2 = ap_const_lv2_2)) and not((k_read_read_fu_120_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_510_p2 = ap_const_lv1_1)))) then 
            L_312_ap_vld <= ap_const_logic_1;
        else 
            L_312_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    L_3_ap_vld_assign_proc : process(k_read_read_fu_120_p2, trunc_ln66_reg_756, ap_CS_fsm_state34)
    begin
        if ((not((k_read_read_fu_120_p2 = ap_const_lv2_2)) and not((k_read_read_fu_120_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state34) and (trunc_ln66_reg_756 = ap_const_lv2_0))) then 
            L_3_ap_vld <= ap_const_logic_1;
        else 
            L_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln66_fu_658_p2 <= std_logic_vector(unsigned(i_1_fu_116) + unsigned(ap_const_lv33_1));
    add_ln69_fu_583_p2 <= std_logic_vector(unsigned(p_reg_369) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln66_fu_510_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_510_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln66_fu_510_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_510_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_392_opcode_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_392_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_392_opcode <= ap_const_lv2_0;
        else 
            grp_fu_392_opcode <= "XX";
        end if; 
    end process;


    grp_fu_392_p0_assign_proc : process(A_load_reg_816, sum_reg_380, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_392_p0 <= A_load_reg_816;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_392_p0 <= sum_reg_380;
        else 
            grp_fu_392_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p1_assign_proc : process(mul_reg_806, sum_reg_380, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_392_p1 <= sum_reg_380;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_392_p1 <= mul_reg_806;
        else 
            grp_fu_392_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_422_p2 <= std_logic_vector(unsigned(k_cast_fu_418_p1) + unsigned(ap_const_lv3_1));
    icmp_ln66_fu_510_p2 <= "1" when (trunc_ln66_1_fu_506_p1 = ap_const_lv32_4) else "0";
    icmp_ln69_1_fu_578_p2 <= "1" when (p_reg_369 = select_ln69_reg_783) else "0";
    icmp_ln69_fu_566_p2 <= "0" when (k = ap_const_lv2_0) else "1";
    k_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k),3));
    k_read_read_fu_120_p2 <= k;
    select_ln69_fu_571_p3 <= 
        k when (icmp_ln69_fu_566_p2(0) = '1') else 
        ap_const_lv2_1;
    tmp_10_fu_516_p3 <= (trunc_ln66_fu_502_p1 & k);
    tmp_11_fu_628_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_1_fu_456_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_2_fu_589_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_3_fu_639_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_7_fu_606_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_8_fu_617_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_9_fu_428_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_fu_470_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_s_fu_442_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln66_1_fu_506_p1 <= i_1_fu_116(32 - 1 downto 0);
    trunc_ln66_fu_502_p1 <= i_1_fu_116(2 - 1 downto 0);
    zext_ln66_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_422_p2),33));
    zext_ln73_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_516_p3),64));
end behav;
