// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module axi4_lu_forward_process_U_row (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        U_0,
        U_013_i,
        U_013_o,
        U_013_o_ap_vld,
        U_014_i,
        U_014_o,
        U_014_o_ap_vld,
        U_015,
        U_015_ap_vld,
        U_1,
        U_116_i,
        U_116_o,
        U_116_o_ap_vld,
        U_117_i,
        U_117_o,
        U_117_o_ap_vld,
        U_118,
        U_118_ap_vld,
        U_2,
        U_219_i,
        U_219_o,
        U_219_o_ap_vld,
        U_220_i,
        U_220_o,
        U_220_o_ap_vld,
        U_221,
        U_221_ap_vld,
        U_3,
        U_322_i,
        U_322_o,
        U_322_o_ap_vld,
        U_323_i,
        U_323_o,
        U_323_o_ap_vld,
        U_324,
        U_324_ap_vld,
        k
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] U_0;
input  [31:0] U_013_i;
output  [31:0] U_013_o;
output   U_013_o_ap_vld;
input  [31:0] U_014_i;
output  [31:0] U_014_o;
output   U_014_o_ap_vld;
output  [31:0] U_015;
output   U_015_ap_vld;
input  [31:0] U_1;
input  [31:0] U_116_i;
output  [31:0] U_116_o;
output   U_116_o_ap_vld;
input  [31:0] U_117_i;
output  [31:0] U_117_o;
output   U_117_o_ap_vld;
output  [31:0] U_118;
output   U_118_ap_vld;
input  [31:0] U_2;
input  [31:0] U_219_i;
output  [31:0] U_219_o;
output   U_219_o_ap_vld;
input  [31:0] U_220_i;
output  [31:0] U_220_o;
output   U_220_o_ap_vld;
output  [31:0] U_221;
output   U_221_ap_vld;
input  [31:0] U_3;
input  [31:0] U_322_i;
output  [31:0] U_322_o;
output   U_322_o_ap_vld;
input  [31:0] U_323_i;
output  [31:0] U_323_o;
output   U_323_o_ap_vld;
output  [31:0] U_324;
output   U_324_ap_vld;
input  [1:0] k;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg[31:0] U_013_o;
reg U_013_o_ap_vld;
reg[31:0] U_014_o;
reg U_014_o_ap_vld;
reg U_015_ap_vld;
reg[31:0] U_116_o;
reg U_116_o_ap_vld;
reg[31:0] U_117_o;
reg U_117_o_ap_vld;
reg U_118_ap_vld;
reg[31:0] U_219_o;
reg U_219_o_ap_vld;
reg[31:0] U_220_o;
reg U_220_o_ap_vld;
reg U_221_ap_vld;
reg[31:0] U_322_o;
reg U_322_o_ap_vld;
reg[31:0] U_323_o;
reg U_323_o_ap_vld;
reg U_324_ap_vld;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] k_read_read_fu_110_p2;
wire   [3:0] tmp_9_fu_387_p3;
reg   [3:0] tmp_9_reg_599;
wire   [31:0] tmp_2_fu_395_p6;
reg   [31:0] tmp_2_reg_604;
wire   [31:0] tmp_3_fu_409_p6;
reg   [31:0] tmp_3_reg_609;
wire   [31:0] tmp_4_fu_423_p6;
reg   [31:0] tmp_4_reg_614;
reg   [3:0] A_addr_reg_642;
wire    ap_CS_fsm_state2;
wire   [1:0] trunc_ln53_fu_465_p1;
reg   [1:0] trunc_ln53_reg_650;
wire   [1:0] select_ln56_fu_474_p3;
reg   [1:0] select_ln56_reg_655;
reg   [31:0] U_013_read_reg_660;
reg   [31:0] U_014_read_reg_665;
reg   [31:0] U_116_read_reg_670;
reg   [31:0] U_117_read_reg_675;
reg   [31:0] U_219_read_reg_680;
reg   [31:0] U_220_read_reg_685;
reg   [31:0] U_322_read_reg_690;
reg   [31:0] U_323_read_reg_695;
wire   [1:0] add_ln56_fu_486_p2;
reg   [1:0] add_ln56_reg_703;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_fu_492_p9;
reg   [31:0] tmp_reg_708;
wire   [31:0] tmp_1_fu_553_p11;
reg   [31:0] tmp_1_reg_713;
wire   [31:0] grp_fu_379_p2;
reg   [31:0] mul_reg_718;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_361_p2;
wire    ap_CS_fsm_state12;
reg   [31:0] A_load_reg_728;
wire    ap_CS_fsm_state13;
reg   [1:0] p_reg_338;
wire   [0:0] icmp_ln53_fu_459_p2;
reg   [31:0] sum_reg_349;
wire   [63:0] zext_ln60_fu_454_p1;
reg   [63:0] j_fu_106;
wire   [63:0] add_ln53_fu_576_p2;
wire   [63:0] idxprom_fu_383_p1;
wire    ap_CS_fsm_state18;
reg   [31:0] grp_fu_361_p0;
reg   [31:0] grp_fu_361_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_2_fu_395_p1;
wire   [31:0] tmp_3_fu_409_p1;
wire   [31:0] tmp_4_fu_423_p1;
wire   [3:0] trunc_ln60_fu_445_p1;
wire   [3:0] add_ln60_fu_449_p2;
wire   [0:0] icmp_ln56_fu_469_p2;
wire   [31:0] tmp_fu_492_p7;
wire   [31:0] tmp_5_fu_509_p4;
wire   [31:0] tmp_6_fu_520_p4;
wire   [31:0] tmp_7_fu_531_p4;
wire   [31:0] tmp_8_fu_542_p4;
wire   [31:0] tmp_5_fu_509_p6;
wire   [31:0] tmp_6_fu_520_p6;
wire   [31:0] tmp_7_fu_531_p6;
wire   [31:0] tmp_8_fu_542_p6;
wire   [31:0] tmp_1_fu_553_p9;
reg   [1:0] grp_fu_361_opcode;
wire   [0:0] icmp_ln56_1_fu_481_p2;
reg   [17:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire   [1:0] tmp_fu_492_p1;
wire   [1:0] tmp_fu_492_p3;
wire  signed [1:0] tmp_fu_492_p5;
wire   [1:0] tmp_1_fu_553_p1;
wire   [1:0] tmp_1_fu_553_p3;
wire  signed [1:0] tmp_1_fu_553_p5;
wire  signed [1:0] tmp_1_fu_553_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
#0 j_fu_106 = 64'd0;
end

axi4_lu_forward_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_361_p0),
    .din1(grp_fu_361_p1),
    .opcode(grp_fu_361_opcode),
    .ce(1'b1),
    .dout(grp_fu_361_p2)
);

axi4_lu_forward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_708),
    .din1(tmp_1_reg_713),
    .ce(1'b1),
    .dout(grp_fu_379_p2)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U21(
    .din0(tmp_2_fu_395_p1),
    .din1(p_read),
    .din2(p_read1),
    .din3(p_read2),
    .din4(k),
    .dout(tmp_2_fu_395_p6)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U22(
    .din0(tmp_3_fu_409_p1),
    .din1(p_read3),
    .din2(p_read4),
    .din3(p_read5),
    .din4(k),
    .dout(tmp_3_fu_409_p6)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U23(
    .din0(tmp_4_fu_423_p1),
    .din1(p_read6),
    .din2(p_read7),
    .din3(p_read8),
    .din4(k),
    .dout(tmp_4_fu_423_p6)
);

axi4_lu_forward_sparsemux_7_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_7_2_32_1_1_U24(
    .din0(tmp_2_reg_604),
    .din1(tmp_3_reg_609),
    .din2(tmp_4_reg_614),
    .def(tmp_fu_492_p7),
    .sel(p_reg_338),
    .dout(tmp_fu_492_p9)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U25(
    .din0(U_0),
    .din1(U_013_read_reg_660),
    .din2(U_014_read_reg_665),
    .din3(tmp_5_fu_509_p4),
    .din4(p_reg_338),
    .dout(tmp_5_fu_509_p6)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U26(
    .din0(U_1),
    .din1(U_116_read_reg_670),
    .din2(U_117_read_reg_675),
    .din3(tmp_6_fu_520_p4),
    .din4(p_reg_338),
    .dout(tmp_6_fu_520_p6)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U27(
    .din0(U_2),
    .din1(U_219_read_reg_680),
    .din2(U_220_read_reg_685),
    .din3(tmp_7_fu_531_p4),
    .din4(p_reg_338),
    .dout(tmp_7_fu_531_p6)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U28(
    .din0(U_3),
    .din1(U_322_read_reg_690),
    .din2(U_323_read_reg_695),
    .din3(tmp_8_fu_542_p4),
    .din4(p_reg_338),
    .dout(tmp_8_fu_542_p6)
);

axi4_lu_forward_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U29(
    .din0(tmp_5_fu_509_p6),
    .din1(tmp_6_fu_520_p6),
    .din2(tmp_7_fu_531_p6),
    .din3(tmp_8_fu_542_p6),
    .def(tmp_1_fu_553_p9),
    .sel(trunc_ln53_reg_650),
    .dout(tmp_1_fu_553_p11)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_fu_106 <= idxprom_fu_383_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        j_fu_106 <= add_ln53_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln53_fu_459_p2 == 1'd0))) begin
        p_reg_338 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        p_reg_338 <= add_ln56_reg_703;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln53_fu_459_p2 == 1'd0))) begin
        sum_reg_349 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sum_reg_349 <= grp_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_addr_reg_642 <= zext_ln60_fu_454_p1;
        U_013_read_reg_660 <= U_013_i;
        U_014_read_reg_665 <= U_014_i;
        U_116_read_reg_670 <= U_116_i;
        U_117_read_reg_675 <= U_117_i;
        U_219_read_reg_680 <= U_219_i;
        U_220_read_reg_685 <= U_220_i;
        U_322_read_reg_690 <= U_322_i;
        U_323_read_reg_695 <= U_323_i;
        select_ln56_reg_655 <= select_ln56_fu_474_p3;
        trunc_ln53_reg_650 <= trunc_ln53_fu_465_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        A_load_reg_728 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln56_reg_703 <= add_ln56_fu_486_p2;
        tmp_1_reg_713 <= tmp_1_fu_553_p11;
        tmp_reg_708 <= tmp_fu_492_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_reg_718 <= grp_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_2_reg_604 <= tmp_2_fu_395_p6;
        tmp_3_reg_609 <= tmp_3_fu_409_p6;
        tmp_4_reg_614 <= tmp_4_fu_423_p6;
        tmp_9_reg_599[3 : 2] <= tmp_9_fu_387_p3[3 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd0))) begin
        U_013_o = grp_fu_361_p2;
    end else begin
        U_013_o = U_013_i;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd0))) begin
        U_013_o_ap_vld = 1'b1;
    end else begin
        U_013_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd0))) begin
        U_014_o = grp_fu_361_p2;
    end else begin
        U_014_o = U_014_i;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd0))) begin
        U_014_o_ap_vld = 1'b1;
    end else begin
        U_014_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(k_read_read_fu_110_p2 == 2'd2) & ~(k_read_read_fu_110_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd0))) begin
        U_015_ap_vld = 1'b1;
    end else begin
        U_015_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd1))) begin
        U_116_o = grp_fu_361_p2;
    end else begin
        U_116_o = U_116_i;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd1))) begin
        U_116_o_ap_vld = 1'b1;
    end else begin
        U_116_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd1))) begin
        U_117_o = grp_fu_361_p2;
    end else begin
        U_117_o = U_117_i;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd1))) begin
        U_117_o_ap_vld = 1'b1;
    end else begin
        U_117_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(k_read_read_fu_110_p2 == 2'd2) & ~(k_read_read_fu_110_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd1))) begin
        U_118_ap_vld = 1'b1;
    end else begin
        U_118_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd2))) begin
        U_219_o = grp_fu_361_p2;
    end else begin
        U_219_o = U_219_i;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd2))) begin
        U_219_o_ap_vld = 1'b1;
    end else begin
        U_219_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd2))) begin
        U_220_o = grp_fu_361_p2;
    end else begin
        U_220_o = U_220_i;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd2))) begin
        U_220_o_ap_vld = 1'b1;
    end else begin
        U_220_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(k_read_read_fu_110_p2 == 2'd2) & ~(k_read_read_fu_110_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd2))) begin
        U_221_ap_vld = 1'b1;
    end else begin
        U_221_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd3))) begin
        U_322_o = grp_fu_361_p2;
    end else begin
        U_322_o = U_322_i;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd3))) begin
        U_322_o_ap_vld = 1'b1;
    end else begin
        U_322_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd3))) begin
        U_323_o = grp_fu_361_p2;
    end else begin
        U_323_o = U_323_i;
    end
end

always @ (*) begin
    if (((k_read_read_fu_110_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd3))) begin
        U_323_o_ap_vld = 1'b1;
    end else begin
        U_323_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(k_read_read_fu_110_p2 == 2'd2) & ~(k_read_read_fu_110_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state18) & (trunc_ln53_reg_650 == 2'd3))) begin
        U_324_ap_vld = 1'b1;
    end else begin
        U_324_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln53_fu_459_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln53_fu_459_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_361_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_361_opcode = 2'd0;
    end else begin
        grp_fu_361_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_361_p0 = A_load_reg_728;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_361_p0 = sum_reg_349;
    end else begin
        grp_fu_361_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_361_p1 = sum_reg_349;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_361_p1 = mul_reg_718;
    end else begin
        grp_fu_361_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln53_fu_459_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln56_1_fu_481_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = A_addr_reg_642;

assign U_015 = grp_fu_361_p2;

assign U_118 = grp_fu_361_p2;

assign U_221 = grp_fu_361_p2;

assign U_324 = grp_fu_361_p2;

assign add_ln53_fu_576_p2 = (j_fu_106 + 64'd1);

assign add_ln56_fu_486_p2 = (p_reg_338 + 2'd1);

assign add_ln60_fu_449_p2 = (tmp_9_reg_599 + trunc_ln60_fu_445_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign icmp_ln53_fu_459_p2 = ((j_fu_106 == 64'd4) ? 1'b1 : 1'b0);

assign icmp_ln56_1_fu_481_p2 = ((p_reg_338 == select_ln56_reg_655) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_469_p2 = ((k != 2'd0) ? 1'b1 : 1'b0);

assign idxprom_fu_383_p1 = k;

assign k_read_read_fu_110_p2 = k;

assign select_ln56_fu_474_p3 = ((icmp_ln56_fu_469_p2[0:0] == 1'b1) ? k : 2'd1);

assign tmp_1_fu_553_p9 = 'bx;

assign tmp_2_fu_395_p1 = 'bx;

assign tmp_3_fu_409_p1 = 'bx;

assign tmp_4_fu_423_p1 = 'bx;

assign tmp_5_fu_509_p4 = 'bx;

assign tmp_6_fu_520_p4 = 'bx;

assign tmp_7_fu_531_p4 = 'bx;

assign tmp_8_fu_542_p4 = 'bx;

assign tmp_9_fu_387_p3 = {{k}, {2'd0}};

assign tmp_fu_492_p7 = 'bx;

assign trunc_ln53_fu_465_p1 = j_fu_106[1:0];

assign trunc_ln60_fu_445_p1 = j_fu_106[3:0];

assign zext_ln60_fu_454_p1 = add_ln60_fu_449_p2;

always @ (posedge ap_clk) begin
    tmp_9_reg_599[1:0] <= 2'b00;
end

endmodule //axi4_lu_forward_process_U_row
