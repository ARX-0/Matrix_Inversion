// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axi4_lu_forward_axi4_lu_forward,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=14155,HLS_SYN_LUT=17647,HLS_VERSION=2023_2}" *)

module axi4_lu_forward (
        ap_clk,
        ap_rst_n,
        A_in_TDATA,
        A_in_TVALID,
        A_in_TREADY,
        A_LU_out_TDATA,
        A_LU_out_TVALID,
        A_LU_out_TREADY,
        P_out_TDATA,
        P_out_TVALID,
        P_out_TREADY,
        Y_out_TDATA,
        Y_out_TVALID,
        Y_out_TREADY,
        len_TDATA,
        len_TVALID,
        len_TREADY
);

parameter    ap_ST_fsm_state1 = 65'd1;
parameter    ap_ST_fsm_state2 = 65'd2;
parameter    ap_ST_fsm_state3 = 65'd4;
parameter    ap_ST_fsm_state4 = 65'd8;
parameter    ap_ST_fsm_state5 = 65'd16;
parameter    ap_ST_fsm_state6 = 65'd32;
parameter    ap_ST_fsm_state7 = 65'd64;
parameter    ap_ST_fsm_state8 = 65'd128;
parameter    ap_ST_fsm_state9 = 65'd256;
parameter    ap_ST_fsm_state10 = 65'd512;
parameter    ap_ST_fsm_state11 = 65'd1024;
parameter    ap_ST_fsm_state12 = 65'd2048;
parameter    ap_ST_fsm_state13 = 65'd4096;
parameter    ap_ST_fsm_state14 = 65'd8192;
parameter    ap_ST_fsm_state15 = 65'd16384;
parameter    ap_ST_fsm_state16 = 65'd32768;
parameter    ap_ST_fsm_state17 = 65'd65536;
parameter    ap_ST_fsm_state18 = 65'd131072;
parameter    ap_ST_fsm_state19 = 65'd262144;
parameter    ap_ST_fsm_state20 = 65'd524288;
parameter    ap_ST_fsm_state21 = 65'd1048576;
parameter    ap_ST_fsm_state22 = 65'd2097152;
parameter    ap_ST_fsm_state23 = 65'd4194304;
parameter    ap_ST_fsm_state24 = 65'd8388608;
parameter    ap_ST_fsm_state25 = 65'd16777216;
parameter    ap_ST_fsm_state26 = 65'd33554432;
parameter    ap_ST_fsm_state27 = 65'd67108864;
parameter    ap_ST_fsm_state28 = 65'd134217728;
parameter    ap_ST_fsm_state29 = 65'd268435456;
parameter    ap_ST_fsm_state30 = 65'd536870912;
parameter    ap_ST_fsm_state31 = 65'd1073741824;
parameter    ap_ST_fsm_state32 = 65'd2147483648;
parameter    ap_ST_fsm_state33 = 65'd4294967296;
parameter    ap_ST_fsm_state34 = 65'd8589934592;
parameter    ap_ST_fsm_state35 = 65'd17179869184;
parameter    ap_ST_fsm_state36 = 65'd34359738368;
parameter    ap_ST_fsm_state37 = 65'd68719476736;
parameter    ap_ST_fsm_state38 = 65'd137438953472;
parameter    ap_ST_fsm_state39 = 65'd274877906944;
parameter    ap_ST_fsm_state40 = 65'd549755813888;
parameter    ap_ST_fsm_state41 = 65'd1099511627776;
parameter    ap_ST_fsm_state42 = 65'd2199023255552;
parameter    ap_ST_fsm_state43 = 65'd4398046511104;
parameter    ap_ST_fsm_state44 = 65'd8796093022208;
parameter    ap_ST_fsm_state45 = 65'd17592186044416;
parameter    ap_ST_fsm_state46 = 65'd35184372088832;
parameter    ap_ST_fsm_state47 = 65'd70368744177664;
parameter    ap_ST_fsm_state48 = 65'd140737488355328;
parameter    ap_ST_fsm_state49 = 65'd281474976710656;
parameter    ap_ST_fsm_state50 = 65'd562949953421312;
parameter    ap_ST_fsm_state51 = 65'd1125899906842624;
parameter    ap_ST_fsm_state52 = 65'd2251799813685248;
parameter    ap_ST_fsm_state53 = 65'd4503599627370496;
parameter    ap_ST_fsm_state54 = 65'd9007199254740992;
parameter    ap_ST_fsm_state55 = 65'd18014398509481984;
parameter    ap_ST_fsm_state56 = 65'd36028797018963968;
parameter    ap_ST_fsm_state57 = 65'd72057594037927936;
parameter    ap_ST_fsm_state58 = 65'd144115188075855872;
parameter    ap_ST_fsm_state59 = 65'd288230376151711744;
parameter    ap_ST_fsm_state60 = 65'd576460752303423488;
parameter    ap_ST_fsm_state61 = 65'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 65'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 65'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 65'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 65'd18446744073709551616;

input   ap_clk;
input   ap_rst_n;
input  [63:0] A_in_TDATA;
input   A_in_TVALID;
output   A_in_TREADY;
output  [63:0] A_LU_out_TDATA;
output   A_LU_out_TVALID;
input   A_LU_out_TREADY;
output  [63:0] P_out_TDATA;
output   P_out_TVALID;
input   P_out_TREADY;
output  [63:0] Y_out_TDATA;
output   Y_out_TVALID;
input   Y_out_TREADY;
input  [63:0] len_TDATA;
input   len_TVALID;
output   len_TREADY;

 reg    ap_rst_n_inv;
reg    A_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [64:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg    A_LU_out_TDATA_blk_n;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
reg    P_out_TDATA_blk_n;
reg    Y_out_TDATA_blk_n;
reg    len_TDATA_blk_n;
wire   [3:0] A_addr_reg_780;
wire   [3:0] A_addr_21_reg_785;
wire   [3:0] A_addr_22_reg_790;
wire   [3:0] A_addr_23_reg_795;
wire   [3:0] A_addr_24_reg_800;
wire   [3:0] A_addr_25_reg_805;
wire   [3:0] A_addr_26_reg_810;
wire   [3:0] A_addr_27_reg_815;
wire   [3:0] A_addr_28_reg_820;
wire   [3:0] A_addr_29_reg_825;
wire   [3:0] A_addr_30_reg_830;
wire   [3:0] A_addr_31_reg_835;
wire   [3:0] A_addr_32_reg_840;
wire   [3:0] A_addr_33_reg_845;
wire   [3:0] A_addr_34_reg_850;
wire   [3:0] A_addr_35_reg_855;
reg   [31:0] L_1_reg_860;
wire    ap_CS_fsm_state18;
reg   [31:0] L_2_1_reg_865;
reg   [31:0] L_3_2_reg_870;
reg   [31:0] L_2_reg_875;
reg   [31:0] L_3_reg_880;
reg   [31:0] L_3_1_reg_885;
reg   [31:0] P_0_reg_890;
reg   [31:0] P_1_reg_895;
reg   [31:0] P_2_reg_900;
reg   [31:0] P_3_reg_905;
wire   [63:0] zext_ln204_fu_456_p1;
wire   [63:0] zext_ln216_fu_461_p1;
wire   [63:0] zext_ln204_1_fu_469_p1;
wire   [63:0] zext_ln216_1_fu_474_p1;
wire   [63:0] zext_ln204_2_fu_482_p1;
wire   [63:0] zext_ln216_2_fu_487_p1;
wire   [63:0] zext_ln204_3_fu_495_p1;
wire   [63:0] zext_ln216_3_fu_507_p1;
reg   [31:0] Y_1_0_reg_950;
wire    ap_CS_fsm_state52;
reg   [31:0] Y_1_1_reg_955;
reg   [31:0] Y_1_2_reg_960;
reg   [31:0] Y_1_3_reg_965;
reg   [31:0] Y_2_0_reg_970;
reg   [31:0] Y_2_1_reg_975;
reg   [31:0] Y_2_2_reg_980;
reg   [31:0] Y_2_3_reg_985;
reg   [31:0] Y_3_0_reg_990;
reg   [31:0] Y_3_1_reg_995;
reg   [31:0] Y_3_2_reg_1000;
reg   [31:0] Y_3_3_reg_1005;
wire   [63:0] zext_ln204_4_fu_564_p1;
wire   [63:0] zext_ln228_fu_572_p1;
wire   [63:0] zext_ln204_5_fu_581_p1;
wire   [63:0] zext_ln228_1_fu_589_p1;
wire   [63:0] zext_ln204_6_fu_598_p1;
wire   [63:0] zext_ln228_2_fu_606_p1;
wire   [63:0] zext_ln204_7_fu_615_p1;
wire   [63:0] zext_ln228_3_fu_623_p1;
wire   [63:0] zext_ln204_8_fu_632_p1;
wire   [63:0] zext_ln228_4_fu_640_p1;
wire   [63:0] zext_ln204_9_fu_649_p1;
wire   [63:0] zext_ln228_5_fu_657_p1;
wire   [63:0] zext_ln204_10_fu_666_p1;
wire   [63:0] zext_ln228_6_fu_674_p1;
wire   [63:0] zext_ln204_11_fu_683_p1;
wire   [63:0] zext_ln228_7_fu_691_p1;
wire   [63:0] zext_ln204_12_fu_700_p1;
wire   [63:0] zext_ln228_8_fu_708_p1;
wire   [63:0] zext_ln204_13_fu_717_p1;
wire   [63:0] zext_ln228_9_fu_725_p1;
wire   [63:0] zext_ln204_14_fu_734_p1;
wire   [63:0] zext_ln228_10_fu_742_p1;
wire   [63:0] zext_ln204_15_fu_759_p1;
wire   [63:0] zext_ln228_11_fu_775_p1;
reg   [3:0] A_address0;
reg    A_ce0;
reg    A_we0;
reg   [31:0] A_d0;
wire   [31:0] A_q0;
reg    A_ce1;
reg    A_we1;
wire   [31:0] A_q1;
wire    grp_luDecomposition_fu_253_ap_start;
wire    grp_luDecomposition_fu_253_ap_done;
wire    grp_luDecomposition_fu_253_ap_idle;
wire    grp_luDecomposition_fu_253_ap_ready;
wire   [3:0] grp_luDecomposition_fu_253_A_address0;
wire    grp_luDecomposition_fu_253_A_ce0;
wire    grp_luDecomposition_fu_253_A_we0;
wire   [31:0] grp_luDecomposition_fu_253_A_d0;
wire   [3:0] grp_luDecomposition_fu_253_A_address1;
wire    grp_luDecomposition_fu_253_A_ce1;
wire    grp_luDecomposition_fu_253_A_we1;
wire   [31:0] grp_luDecomposition_fu_253_A_d1;
wire   [31:0] grp_luDecomposition_fu_253_ap_return_0;
wire   [31:0] grp_luDecomposition_fu_253_ap_return_1;
wire   [31:0] grp_luDecomposition_fu_253_ap_return_2;
wire   [31:0] grp_luDecomposition_fu_253_ap_return_3;
wire   [31:0] grp_luDecomposition_fu_253_ap_return_4;
wire   [31:0] grp_luDecomposition_fu_253_ap_return_5;
wire   [31:0] grp_luDecomposition_fu_253_ap_return_6;
wire   [31:0] grp_luDecomposition_fu_253_ap_return_7;
wire   [31:0] grp_luDecomposition_fu_253_ap_return_8;
wire   [31:0] grp_luDecomposition_fu_253_ap_return_9;
wire   [31:0] grp_forwardSubstitution_fu_258_ap_return_0;
wire   [31:0] grp_forwardSubstitution_fu_258_ap_return_1;
wire   [31:0] grp_forwardSubstitution_fu_258_ap_return_2;
wire   [31:0] grp_forwardSubstitution_fu_258_ap_return_3;
wire   [31:0] grp_forwardSubstitution_fu_258_ap_return_4;
wire   [31:0] grp_forwardSubstitution_fu_258_ap_return_5;
wire   [31:0] grp_forwardSubstitution_fu_258_ap_return_6;
wire   [31:0] grp_forwardSubstitution_fu_258_ap_return_7;
wire   [31:0] grp_forwardSubstitution_fu_258_ap_return_8;
wire   [31:0] grp_forwardSubstitution_fu_258_ap_return_9;
wire   [31:0] grp_forwardSubstitution_fu_258_ap_return_10;
wire   [31:0] grp_forwardSubstitution_fu_258_ap_return_11;
reg    grp_luDecomposition_fu_253_ap_start_reg;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
reg    ap_block_state1;
reg    ap_block_state20;
reg    ap_block_state21;
reg    ap_block_state22;
reg    ap_block_state23;
reg    ap_block_state53;
reg    ap_block_state54;
reg    ap_block_state55;
reg    ap_block_state56;
reg    ap_block_state57;
reg    ap_block_state58;
reg    ap_block_state59;
reg    ap_block_state60;
reg    ap_block_state61;
reg    ap_block_state62;
reg    ap_block_state63;
reg    ap_block_state64;
reg    ap_block_state20_io;
reg    ap_block_state21_io;
reg    ap_block_state22_io;
reg    ap_block_state23_io;
reg    ap_block_state53_io;
reg    ap_block_state54_io;
reg    ap_block_state55_io;
reg    ap_block_state56_io;
reg    ap_block_state57_io;
reg    ap_block_state58_io;
reg    ap_block_state59_io;
reg    ap_block_state60_io;
reg    ap_block_state61_io;
reg    ap_block_state62_io;
reg    ap_block_state63_io;
reg    ap_block_state64_io;
wire   [31:0] pkt_data_fu_272_p1;
wire   [31:0] pkt_data_1_fu_281_p1;
wire   [31:0] pkt_data_2_fu_290_p1;
wire   [31:0] pkt_data_3_fu_299_p1;
wire   [31:0] pkt_data_4_fu_308_p1;
wire   [31:0] pkt_data_5_fu_317_p1;
wire   [31:0] pkt_data_6_fu_326_p1;
wire   [31:0] pkt_data_7_fu_335_p1;
wire   [31:0] pkt_data_8_fu_344_p1;
wire   [31:0] pkt_data_9_fu_353_p1;
wire   [31:0] pkt_data_10_fu_362_p1;
wire   [31:0] pkt_data_11_fu_371_p1;
wire   [31:0] pkt_data_12_fu_380_p1;
wire   [31:0] pkt_data_13_fu_389_p1;
wire   [31:0] pkt_data_14_fu_398_p1;
wire   [31:0] pkt_data_15_fu_407_p1;
wire   [31:0] trunc_ln174_fu_268_p1;
wire   [31:0] trunc_ln174_1_fu_277_p1;
wire   [31:0] trunc_ln174_2_fu_286_p1;
wire   [31:0] trunc_ln174_3_fu_295_p1;
wire   [31:0] trunc_ln174_4_fu_304_p1;
wire   [31:0] trunc_ln174_5_fu_313_p1;
wire   [31:0] trunc_ln174_6_fu_322_p1;
wire   [31:0] trunc_ln174_7_fu_331_p1;
wire   [31:0] trunc_ln174_8_fu_340_p1;
wire   [31:0] trunc_ln174_9_fu_349_p1;
wire   [31:0] trunc_ln174_10_fu_358_p1;
wire   [31:0] trunc_ln174_11_fu_367_p1;
wire   [31:0] trunc_ln174_12_fu_376_p1;
wire   [31:0] trunc_ln174_13_fu_385_p1;
wire   [31:0] trunc_ln174_14_fu_394_p1;
wire   [31:0] trunc_ln174_15_fu_403_p1;
wire   [31:0] bitcast_ln204_fu_452_p1;
wire   [31:0] bitcast_ln204_1_fu_465_p1;
wire   [31:0] bitcast_ln204_2_fu_478_p1;
wire   [31:0] bitcast_ln204_3_fu_491_p1;
wire   [32:0] zext_ln216_3_cast_fu_500_p3;
wire   [31:0] bitcast_ln204_4_fu_560_p1;
wire   [31:0] bitcast_ln228_fu_569_p1;
wire   [31:0] bitcast_ln204_5_fu_577_p1;
wire   [31:0] bitcast_ln228_1_fu_586_p1;
wire   [31:0] bitcast_ln204_6_fu_594_p1;
wire   [31:0] bitcast_ln228_2_fu_603_p1;
wire   [31:0] bitcast_ln204_7_fu_611_p1;
wire   [31:0] bitcast_ln228_3_fu_620_p1;
wire   [31:0] bitcast_ln204_8_fu_628_p1;
wire   [31:0] bitcast_ln228_4_fu_637_p1;
wire   [31:0] bitcast_ln204_9_fu_645_p1;
wire   [31:0] bitcast_ln228_5_fu_654_p1;
wire   [31:0] bitcast_ln204_10_fu_662_p1;
wire   [31:0] bitcast_ln228_6_fu_671_p1;
wire   [31:0] bitcast_ln204_11_fu_679_p1;
wire   [31:0] bitcast_ln228_7_fu_688_p1;
wire   [31:0] bitcast_ln204_12_fu_696_p1;
wire   [31:0] bitcast_ln228_8_fu_705_p1;
wire   [31:0] bitcast_ln204_13_fu_713_p1;
wire   [31:0] bitcast_ln228_9_fu_722_p1;
wire   [31:0] bitcast_ln204_14_fu_730_p1;
wire   [31:0] bitcast_ln228_10_fu_739_p1;
wire   [31:0] bitcast_ln204_15_fu_747_p1;
wire   [32:0] zext_ln204_15_cast_fu_751_p3;
wire   [31:0] bitcast_ln228_11_fu_764_p1;
wire   [32:0] zext_ln228_11_cast_fu_767_p3;
reg   [64:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_block_state24;
reg    ap_block_state24_io;
reg    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
reg    ap_ST_fsm_state53_blk;
reg    ap_ST_fsm_state54_blk;
reg    ap_ST_fsm_state55_blk;
reg    ap_ST_fsm_state56_blk;
reg    ap_ST_fsm_state57_blk;
reg    ap_ST_fsm_state58_blk;
reg    ap_ST_fsm_state59_blk;
reg    ap_ST_fsm_state60_blk;
reg    ap_ST_fsm_state61_blk;
reg    ap_ST_fsm_state62_blk;
reg    ap_ST_fsm_state63_blk;
reg    ap_ST_fsm_state64_blk;
reg    ap_ST_fsm_state65_blk;
wire    regslice_both_A_LU_out_U_apdone_blk;
wire    regslice_both_P_out_U_apdone_blk;
wire    regslice_both_Y_out_U_apdone_blk;
reg    ap_block_state65;
reg    ap_block_state65_io;
wire    regslice_both_A_in_U_apdone_blk;
wire   [63:0] A_in_TDATA_int_regslice;
wire    A_in_TVALID_int_regslice;
reg    A_in_TREADY_int_regslice;
wire    regslice_both_A_in_U_ack_in;
reg   [63:0] A_LU_out_TDATA_int_regslice;
reg    A_LU_out_TVALID_int_regslice;
wire    A_LU_out_TREADY_int_regslice;
wire    regslice_both_A_LU_out_U_vld_out;
reg   [63:0] P_out_TDATA_int_regslice;
reg    P_out_TVALID_int_regslice;
wire    P_out_TREADY_int_regslice;
wire    regslice_both_P_out_U_vld_out;
reg   [63:0] Y_out_TDATA_int_regslice;
reg    Y_out_TVALID_int_regslice;
wire    Y_out_TREADY_int_regslice;
wire    regslice_both_Y_out_U_vld_out;
wire    regslice_both_len_U_apdone_blk;
wire   [63:0] len_TDATA_int_regslice;
wire    len_TVALID_int_regslice;
reg    len_TREADY_int_regslice;
wire    regslice_both_len_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 65'd1;
#0 grp_luDecomposition_fu_253_ap_start_reg = 1'b0;
end

axi4_lu_forward_A_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(A_d0),
    .q0(A_q0),
    .address1(grp_luDecomposition_fu_253_A_address1),
    .ce1(A_ce1),
    .we1(A_we1),
    .d1(grp_luDecomposition_fu_253_A_d1),
    .q1(A_q1)
);

axi4_lu_forward_luDecomposition grp_luDecomposition_fu_253(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_luDecomposition_fu_253_ap_start),
    .ap_done(grp_luDecomposition_fu_253_ap_done),
    .ap_idle(grp_luDecomposition_fu_253_ap_idle),
    .ap_ready(grp_luDecomposition_fu_253_ap_ready),
    .A_address0(grp_luDecomposition_fu_253_A_address0),
    .A_ce0(grp_luDecomposition_fu_253_A_ce0),
    .A_we0(grp_luDecomposition_fu_253_A_we0),
    .A_d0(grp_luDecomposition_fu_253_A_d0),
    .A_q0(A_q0),
    .A_address1(grp_luDecomposition_fu_253_A_address1),
    .A_ce1(grp_luDecomposition_fu_253_A_ce1),
    .A_we1(grp_luDecomposition_fu_253_A_we1),
    .A_d1(grp_luDecomposition_fu_253_A_d1),
    .A_q1(A_q1),
    .ap_return_0(grp_luDecomposition_fu_253_ap_return_0),
    .ap_return_1(grp_luDecomposition_fu_253_ap_return_1),
    .ap_return_2(grp_luDecomposition_fu_253_ap_return_2),
    .ap_return_3(grp_luDecomposition_fu_253_ap_return_3),
    .ap_return_4(grp_luDecomposition_fu_253_ap_return_4),
    .ap_return_5(grp_luDecomposition_fu_253_ap_return_5),
    .ap_return_6(grp_luDecomposition_fu_253_ap_return_6),
    .ap_return_7(grp_luDecomposition_fu_253_ap_return_7),
    .ap_return_8(grp_luDecomposition_fu_253_ap_return_8),
    .ap_return_9(grp_luDecomposition_fu_253_ap_return_9)
);

axi4_lu_forward_forwardSubstitution grp_forwardSubstitution_fu_258(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .L_0_0_1_val(L_1_reg_860),
    .L_0_0_2_val(L_2_1_reg_865),
    .L_0_0_3_val(L_3_2_reg_870),
    .L_1_0_2_val(L_2_reg_875),
    .L_1_0_3_val(L_3_reg_880),
    .L_2_0_3_val(L_3_1_reg_885),
    .ap_return_0(grp_forwardSubstitution_fu_258_ap_return_0),
    .ap_return_1(grp_forwardSubstitution_fu_258_ap_return_1),
    .ap_return_2(grp_forwardSubstitution_fu_258_ap_return_2),
    .ap_return_3(grp_forwardSubstitution_fu_258_ap_return_3),
    .ap_return_4(grp_forwardSubstitution_fu_258_ap_return_4),
    .ap_return_5(grp_forwardSubstitution_fu_258_ap_return_5),
    .ap_return_6(grp_forwardSubstitution_fu_258_ap_return_6),
    .ap_return_7(grp_forwardSubstitution_fu_258_ap_return_7),
    .ap_return_8(grp_forwardSubstitution_fu_258_ap_return_8),
    .ap_return_9(grp_forwardSubstitution_fu_258_ap_return_9),
    .ap_return_10(grp_forwardSubstitution_fu_258_ap_return_10),
    .ap_return_11(grp_forwardSubstitution_fu_258_ap_return_11)
);

axi4_lu_forward_regslice_both #(
    .DataWidth( 64 ))
regslice_both_A_in_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(A_in_TDATA),
    .vld_in(A_in_TVALID),
    .ack_in(regslice_both_A_in_U_ack_in),
    .data_out(A_in_TDATA_int_regslice),
    .vld_out(A_in_TVALID_int_regslice),
    .ack_out(A_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_A_in_U_apdone_blk)
);

axi4_lu_forward_regslice_both #(
    .DataWidth( 64 ))
regslice_both_A_LU_out_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(A_LU_out_TDATA_int_regslice),
    .vld_in(A_LU_out_TVALID_int_regslice),
    .ack_in(A_LU_out_TREADY_int_regslice),
    .data_out(A_LU_out_TDATA),
    .vld_out(regslice_both_A_LU_out_U_vld_out),
    .ack_out(A_LU_out_TREADY),
    .apdone_blk(regslice_both_A_LU_out_U_apdone_blk)
);

axi4_lu_forward_regslice_both #(
    .DataWidth( 64 ))
regslice_both_P_out_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(P_out_TDATA_int_regslice),
    .vld_in(P_out_TVALID_int_regslice),
    .ack_in(P_out_TREADY_int_regslice),
    .data_out(P_out_TDATA),
    .vld_out(regslice_both_P_out_U_vld_out),
    .ack_out(P_out_TREADY),
    .apdone_blk(regslice_both_P_out_U_apdone_blk)
);

axi4_lu_forward_regslice_both #(
    .DataWidth( 64 ))
regslice_both_Y_out_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Y_out_TDATA_int_regslice),
    .vld_in(Y_out_TVALID_int_regslice),
    .ack_in(Y_out_TREADY_int_regslice),
    .data_out(Y_out_TDATA),
    .vld_out(regslice_both_Y_out_U_vld_out),
    .ack_out(Y_out_TREADY),
    .apdone_blk(regslice_both_Y_out_U_apdone_blk)
);

axi4_lu_forward_regslice_both #(
    .DataWidth( 64 ))
regslice_both_len_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(len_TDATA),
    .vld_in(len_TVALID),
    .ack_in(regslice_both_len_U_ack_in),
    .data_out(len_TDATA_int_regslice),
    .vld_out(len_TVALID_int_regslice),
    .ack_out(len_TREADY_int_regslice),
    .apdone_blk(regslice_both_len_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_luDecomposition_fu_253_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_luDecomposition_fu_253_ap_start_reg <= 1'b1;
        end else if ((grp_luDecomposition_fu_253_ap_ready == 1'b1)) begin
            grp_luDecomposition_fu_253_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        L_1_reg_860 <= grp_luDecomposition_fu_253_ap_return_0;
        L_2_1_reg_865 <= grp_luDecomposition_fu_253_ap_return_1;
        L_2_reg_875 <= grp_luDecomposition_fu_253_ap_return_3;
        L_3_1_reg_885 <= grp_luDecomposition_fu_253_ap_return_5;
        L_3_2_reg_870 <= grp_luDecomposition_fu_253_ap_return_2;
        L_3_reg_880 <= grp_luDecomposition_fu_253_ap_return_4;
        P_0_reg_890 <= grp_luDecomposition_fu_253_ap_return_6;
        P_1_reg_895 <= grp_luDecomposition_fu_253_ap_return_7;
        P_2_reg_900 <= grp_luDecomposition_fu_253_ap_return_8;
        P_3_reg_905 <= grp_luDecomposition_fu_253_ap_return_9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        Y_1_0_reg_950 <= grp_forwardSubstitution_fu_258_ap_return_0;
        Y_1_1_reg_955 <= grp_forwardSubstitution_fu_258_ap_return_1;
        Y_1_2_reg_960 <= grp_forwardSubstitution_fu_258_ap_return_2;
        Y_1_3_reg_965 <= grp_forwardSubstitution_fu_258_ap_return_3;
        Y_2_0_reg_970 <= grp_forwardSubstitution_fu_258_ap_return_4;
        Y_2_1_reg_975 <= grp_forwardSubstitution_fu_258_ap_return_5;
        Y_2_2_reg_980 <= grp_forwardSubstitution_fu_258_ap_return_6;
        Y_2_3_reg_985 <= grp_forwardSubstitution_fu_258_ap_return_7;
        Y_3_0_reg_990 <= grp_forwardSubstitution_fu_258_ap_return_8;
        Y_3_1_reg_995 <= grp_forwardSubstitution_fu_258_ap_return_9;
        Y_3_2_reg_1000 <= grp_forwardSubstitution_fu_258_ap_return_10;
        Y_3_3_reg_1005 <= grp_forwardSubstitution_fu_258_ap_return_11;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        A_LU_out_TDATA_blk_n = A_LU_out_TREADY_int_regslice;
    end else begin
        A_LU_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state64) & (1'b1 == ap_CS_fsm_state64))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_15_fu_759_p1;
    end else if (((1'b0 == ap_block_state63) & (1'b1 == ap_CS_fsm_state63))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_14_fu_734_p1;
    end else if (((1'b0 == ap_block_state62) & (1'b1 == ap_CS_fsm_state62))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_13_fu_717_p1;
    end else if (((1'b0 == ap_block_state61) & (1'b1 == ap_CS_fsm_state61))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_12_fu_700_p1;
    end else if (((1'b0 == ap_block_state60) & (1'b1 == ap_CS_fsm_state60))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_11_fu_683_p1;
    end else if (((1'b0 == ap_block_state59) & (1'b1 == ap_CS_fsm_state59))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_10_fu_666_p1;
    end else if (((1'b0 == ap_block_state58) & (1'b1 == ap_CS_fsm_state58))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_9_fu_649_p1;
    end else if (((1'b0 == ap_block_state57) & (1'b1 == ap_CS_fsm_state57))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_8_fu_632_p1;
    end else if (((1'b0 == ap_block_state56) & (1'b1 == ap_CS_fsm_state56))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_7_fu_615_p1;
    end else if (((1'b0 == ap_block_state55) & (1'b1 == ap_CS_fsm_state55))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_6_fu_598_p1;
    end else if (((1'b0 == ap_block_state54) & (1'b1 == ap_CS_fsm_state54))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_5_fu_581_p1;
    end else if (((1'b0 == ap_block_state53) & (1'b1 == ap_CS_fsm_state53))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_4_fu_564_p1;
    end else if (((1'b0 == ap_block_state23) & (1'b1 == ap_CS_fsm_state23))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_3_fu_495_p1;
    end else if (((1'b0 == ap_block_state22) & (1'b1 == ap_CS_fsm_state22))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_2_fu_482_p1;
    end else if (((1'b0 == ap_block_state21) & (1'b1 == ap_CS_fsm_state21))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_1_fu_469_p1;
    end else if (((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20))) begin
        A_LU_out_TDATA_int_regslice = zext_ln204_fu_456_p1;
    end else begin
        A_LU_out_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state64_io) | (1'b1 == ap_block_state64)) & (1'b1 == ap_CS_fsm_state64)) | (~((1'b1 == ap_block_state63_io) | (1'b1 == ap_block_state63)) & (1'b1 == ap_CS_fsm_state63)) | (~((1'b1 == ap_block_state62_io) | (1'b1 == ap_block_state62)) & (1'b1 == ap_CS_fsm_state62)) | (~((1'b1 == ap_block_state61_io) | (1'b1 == ap_block_state61)) & (1'b1 == ap_CS_fsm_state61)) | (~((1'b1 == ap_block_state60_io) | (1'b1 == ap_block_state60)) & (1'b1 == ap_CS_fsm_state60)) | (~((1'b1 == ap_block_state59_io) | (1'b1 == ap_block_state59)) & (1'b1 == ap_CS_fsm_state59)) | (~((1'b1 == ap_block_state58_io) | (1'b1 == ap_block_state58)) & (1'b1 == ap_CS_fsm_state58)) | (~((1'b1 == ap_block_state57_io) | (1'b1 == ap_block_state57)) & (1'b1 == ap_CS_fsm_state57)) | (~((1'b1 == ap_block_state56_io) | (1'b1 == ap_block_state56)) & (1'b1 == ap_CS_fsm_state56)) | (~((1'b1 == ap_block_state55_io) | (1'b1 == ap_block_state55)) & (1'b1 == ap_CS_fsm_state55)) | (~((1'b1 == ap_block_state54_io) | (1'b1 == ap_block_state54)) & 
    (1'b1 == ap_CS_fsm_state54)) | (~((1'b1 == ap_block_state53_io) | (1'b1 == ap_block_state53)) & (1'b1 == ap_CS_fsm_state53)) | (~((1'b1 == ap_block_state23_io) | (1'b1 == ap_block_state23)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b1 == ap_block_state22_io) | (1'b1 == ap_block_state22)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b1 == ap_block_state21_io) | (1'b1 == ap_block_state21)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b1 == ap_block_state20_io) | (1'b1 == ap_block_state20)) & (1'b1 == ap_CS_fsm_state20)))) begin
        A_LU_out_TVALID_int_regslice = 1'b1;
    end else begin
        A_LU_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        A_address0 = A_addr_35_reg_855;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        A_address0 = A_addr_34_reg_850;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        A_address0 = A_addr_33_reg_845;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        A_address0 = A_addr_32_reg_840;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        A_address0 = A_addr_31_reg_835;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        A_address0 = A_addr_30_reg_830;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        A_address0 = A_addr_29_reg_825;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        A_address0 = A_addr_28_reg_820;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        A_address0 = A_addr_27_reg_815;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        A_address0 = A_addr_26_reg_810;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        A_address0 = A_addr_25_reg_805;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        A_address0 = A_addr_24_reg_800;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        A_address0 = A_addr_23_reg_795;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        A_address0 = A_addr_22_reg_790;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        A_address0 = A_addr_21_reg_785;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        A_address0 = A_addr_reg_780;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        A_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        A_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        A_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        A_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        A_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        A_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        A_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        A_address0 = grp_luDecomposition_fu_253_A_address0;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state52) | (~((1'b1 == ap_block_state63_io) | (1'b1 == ap_block_state63)) & (1'b1 == ap_CS_fsm_state63)) | (~((1'b1 == ap_block_state62_io) | (1'b1 == ap_block_state62)) & (1'b1 == ap_CS_fsm_state62)) | (~((1'b1 == ap_block_state61_io) | (1'b1 == ap_block_state61)) & (1'b1 == ap_CS_fsm_state61)) | (~((1'b1 == ap_block_state60_io) | (1'b1 == ap_block_state60)) & (1'b1 == ap_CS_fsm_state60)) | (~((1'b1 == ap_block_state59_io) | (1'b1 == ap_block_state59)) & (1'b1 == ap_CS_fsm_state59)) | (~((1'b1 == ap_block_state58_io) | (1'b1 == ap_block_state58)) & (1'b1 == ap_CS_fsm_state58)) | (~((1'b1 == ap_block_state57_io) | (1'b1 == ap_block_state57)) & (1'b1 == ap_CS_fsm_state57)) | (~((1'b1 == ap_block_state56_io) | (1'b1 == ap_block_state56)) & (1'b1 == ap_CS_fsm_state56)) | (~((1'b1 == ap_block_state55_io) | (1'b1 == ap_block_state55)) & (1'b1 == ap_CS_fsm_state55)) | (~((1'b1 == ap_block_state54_io) | (1'b1 == ap_block_state54)) & (1'b1 == ap_CS_fsm_state54)) | (~((1'b1 
    == ap_block_state53_io) | (1'b1 == ap_block_state53)) & (1'b1 == ap_CS_fsm_state53)) | (~((1'b1 == ap_block_state22_io) | (1'b1 == ap_block_state22)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b1 == ap_block_state21_io) | (1'b1 == ap_block_state21)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b1 == ap_block_state20_io) | (1'b1 == ap_block_state20)) & (1'b1 == ap_CS_fsm_state20)) | ((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state15) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state13) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 
    == ap_CS_fsm_state8)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state2)))) begin
        A_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        A_ce0 = grp_luDecomposition_fu_253_A_ce0;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        A_ce1 = grp_luDecomposition_fu_253_A_ce1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        A_d0 = pkt_data_15_fu_407_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        A_d0 = pkt_data_14_fu_398_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        A_d0 = pkt_data_13_fu_389_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        A_d0 = pkt_data_12_fu_380_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        A_d0 = pkt_data_11_fu_371_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        A_d0 = pkt_data_10_fu_362_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        A_d0 = pkt_data_9_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_d0 = pkt_data_8_fu_344_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_d0 = pkt_data_7_fu_335_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_d0 = pkt_data_6_fu_326_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_d0 = pkt_data_5_fu_317_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        A_d0 = pkt_data_4_fu_308_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_d0 = pkt_data_3_fu_299_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_d0 = pkt_data_2_fu_290_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_d0 = pkt_data_1_fu_281_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        A_d0 = pkt_data_fu_272_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        A_d0 = grp_luDecomposition_fu_253_A_d0;
    end else begin
        A_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        A_in_TDATA_blk_n = A_in_TVALID_int_regslice;
    end else begin
        A_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state15) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state13) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 
    == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state2)))) begin
        A_in_TREADY_int_regslice = 1'b1;
    end else begin
        A_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state15) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state13) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == A_in_TVALID_int_regslice)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 
    == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state2)))) begin
        A_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        A_we0 = grp_luDecomposition_fu_253_A_we0;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        A_we1 = grp_luDecomposition_fu_253_A_we1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        P_out_TDATA_blk_n = P_out_TREADY_int_regslice;
    end else begin
        P_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state23) & (1'b1 == ap_CS_fsm_state23))) begin
        P_out_TDATA_int_regslice = zext_ln216_3_fu_507_p1;
    end else if (((1'b0 == ap_block_state22) & (1'b1 == ap_CS_fsm_state22))) begin
        P_out_TDATA_int_regslice = zext_ln216_2_fu_487_p1;
    end else if (((1'b0 == ap_block_state21) & (1'b1 == ap_CS_fsm_state21))) begin
        P_out_TDATA_int_regslice = zext_ln216_1_fu_474_p1;
    end else if (((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20))) begin
        P_out_TDATA_int_regslice = zext_ln216_fu_461_p1;
    end else begin
        P_out_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state23_io) | (1'b1 == ap_block_state23)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b1 == ap_block_state22_io) | (1'b1 == ap_block_state22)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b1 == ap_block_state21_io) | (1'b1 == ap_block_state21)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b1 == ap_block_state20_io) | (1'b1 == ap_block_state20)) & (1'b1 == ap_CS_fsm_state20)))) begin
        P_out_TVALID_int_regslice = 1'b1;
    end else begin
        P_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        Y_out_TDATA_blk_n = Y_out_TREADY_int_regslice;
    end else begin
        Y_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state64) & (1'b1 == ap_CS_fsm_state64))) begin
        Y_out_TDATA_int_regslice = zext_ln228_11_fu_775_p1;
    end else if (((1'b0 == ap_block_state63) & (1'b1 == ap_CS_fsm_state63))) begin
        Y_out_TDATA_int_regslice = zext_ln228_10_fu_742_p1;
    end else if (((1'b0 == ap_block_state62) & (1'b1 == ap_CS_fsm_state62))) begin
        Y_out_TDATA_int_regslice = zext_ln228_9_fu_725_p1;
    end else if (((1'b0 == ap_block_state61) & (1'b1 == ap_CS_fsm_state61))) begin
        Y_out_TDATA_int_regslice = zext_ln228_8_fu_708_p1;
    end else if (((1'b0 == ap_block_state60) & (1'b1 == ap_CS_fsm_state60))) begin
        Y_out_TDATA_int_regslice = zext_ln228_7_fu_691_p1;
    end else if (((1'b0 == ap_block_state59) & (1'b1 == ap_CS_fsm_state59))) begin
        Y_out_TDATA_int_regslice = zext_ln228_6_fu_674_p1;
    end else if (((1'b0 == ap_block_state58) & (1'b1 == ap_CS_fsm_state58))) begin
        Y_out_TDATA_int_regslice = zext_ln228_5_fu_657_p1;
    end else if (((1'b0 == ap_block_state57) & (1'b1 == ap_CS_fsm_state57))) begin
        Y_out_TDATA_int_regslice = zext_ln228_4_fu_640_p1;
    end else if (((1'b0 == ap_block_state56) & (1'b1 == ap_CS_fsm_state56))) begin
        Y_out_TDATA_int_regslice = zext_ln228_3_fu_623_p1;
    end else if (((1'b0 == ap_block_state55) & (1'b1 == ap_CS_fsm_state55))) begin
        Y_out_TDATA_int_regslice = zext_ln228_2_fu_606_p1;
    end else if (((1'b0 == ap_block_state54) & (1'b1 == ap_CS_fsm_state54))) begin
        Y_out_TDATA_int_regslice = zext_ln228_1_fu_589_p1;
    end else if (((1'b0 == ap_block_state53) & (1'b1 == ap_CS_fsm_state53))) begin
        Y_out_TDATA_int_regslice = zext_ln228_fu_572_p1;
    end else if ((((1'b0 == ap_block_state23) & (1'b1 == ap_CS_fsm_state23)) | ((1'b0 == ap_block_state22) & (1'b1 == ap_CS_fsm_state22)) | ((1'b0 == ap_block_state21) & (1'b1 == ap_CS_fsm_state21)))) begin
        Y_out_TDATA_int_regslice = 64'd0;
    end else if (((1'b0 == ap_block_state20) & (1'b1 == ap_CS_fsm_state20))) begin
        Y_out_TDATA_int_regslice = 64'd1065353216;
    end else begin
        Y_out_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state64_io) | (1'b1 == ap_block_state64)) & (1'b1 == ap_CS_fsm_state64)) | (~((1'b1 == ap_block_state63_io) | (1'b1 == ap_block_state63)) & (1'b1 == ap_CS_fsm_state63)) | (~((1'b1 == ap_block_state62_io) | (1'b1 == ap_block_state62)) & (1'b1 == ap_CS_fsm_state62)) | (~((1'b1 == ap_block_state61_io) | (1'b1 == ap_block_state61)) & (1'b1 == ap_CS_fsm_state61)) | (~((1'b1 == ap_block_state60_io) | (1'b1 == ap_block_state60)) & (1'b1 == ap_CS_fsm_state60)) | (~((1'b1 == ap_block_state59_io) | (1'b1 == ap_block_state59)) & (1'b1 == ap_CS_fsm_state59)) | (~((1'b1 == ap_block_state58_io) | (1'b1 == ap_block_state58)) & (1'b1 == ap_CS_fsm_state58)) | (~((1'b1 == ap_block_state57_io) | (1'b1 == ap_block_state57)) & (1'b1 == ap_CS_fsm_state57)) | (~((1'b1 == ap_block_state56_io) | (1'b1 == ap_block_state56)) & (1'b1 == ap_CS_fsm_state56)) | (~((1'b1 == ap_block_state55_io) | (1'b1 == ap_block_state55)) & (1'b1 == ap_CS_fsm_state55)) | (~((1'b1 == ap_block_state54_io) | (1'b1 == ap_block_state54)) & 
    (1'b1 == ap_CS_fsm_state54)) | (~((1'b1 == ap_block_state53_io) | (1'b1 == ap_block_state53)) & (1'b1 == ap_CS_fsm_state53)) | (~((1'b1 == ap_block_state23_io) | (1'b1 == ap_block_state23)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b1 == ap_block_state22_io) | (1'b1 == ap_block_state22)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b1 == ap_block_state21_io) | (1'b1 == ap_block_state21)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b1 == ap_block_state20_io) | (1'b1 == ap_block_state20)) & (1'b1 == ap_CS_fsm_state20)))) begin
        Y_out_TVALID_int_regslice = 1'b1;
    end else begin
        Y_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((grp_luDecomposition_fu_253_ap_done == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state20_io) | (1'b1 == ap_block_state20))) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state21_io) | (1'b1 == ap_block_state21))) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state22_io) | (1'b1 == ap_block_state22))) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state23_io) | (1'b1 == ap_block_state23))) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state24_io) | (1'b1 == ap_block_state24))) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state53_io) | (1'b1 == ap_block_state53))) begin
        ap_ST_fsm_state53_blk = 1'b1;
    end else begin
        ap_ST_fsm_state53_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state54_io) | (1'b1 == ap_block_state54))) begin
        ap_ST_fsm_state54_blk = 1'b1;
    end else begin
        ap_ST_fsm_state54_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state55_io) | (1'b1 == ap_block_state55))) begin
        ap_ST_fsm_state55_blk = 1'b1;
    end else begin
        ap_ST_fsm_state55_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state56_io) | (1'b1 == ap_block_state56))) begin
        ap_ST_fsm_state56_blk = 1'b1;
    end else begin
        ap_ST_fsm_state56_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state57_io) | (1'b1 == ap_block_state57))) begin
        ap_ST_fsm_state57_blk = 1'b1;
    end else begin
        ap_ST_fsm_state57_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state58_io) | (1'b1 == ap_block_state58))) begin
        ap_ST_fsm_state58_blk = 1'b1;
    end else begin
        ap_ST_fsm_state58_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state59_io) | (1'b1 == ap_block_state59))) begin
        ap_ST_fsm_state59_blk = 1'b1;
    end else begin
        ap_ST_fsm_state59_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state60_io) | (1'b1 == ap_block_state60))) begin
        ap_ST_fsm_state60_blk = 1'b1;
    end else begin
        ap_ST_fsm_state60_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state61_io) | (1'b1 == ap_block_state61))) begin
        ap_ST_fsm_state61_blk = 1'b1;
    end else begin
        ap_ST_fsm_state61_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state62_io) | (1'b1 == ap_block_state62))) begin
        ap_ST_fsm_state62_blk = 1'b1;
    end else begin
        ap_ST_fsm_state62_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state63_io) | (1'b1 == ap_block_state63))) begin
        ap_ST_fsm_state63_blk = 1'b1;
    end else begin
        ap_ST_fsm_state63_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state64_io) | (1'b1 == ap_block_state64))) begin
        ap_ST_fsm_state64_blk = 1'b1;
    end else begin
        ap_ST_fsm_state64_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state65_io) | (1'b1 == ap_block_state65))) begin
        ap_ST_fsm_state65_blk = 1'b1;
    end else begin
        ap_ST_fsm_state65_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == A_in_TVALID_int_regslice)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        len_TDATA_blk_n = len_TVALID_int_regslice;
    end else begin
        len_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        len_TREADY_int_regslice = 1'b1;
    end else begin
        len_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == A_in_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'b1 == A_in_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (1'b1 == A_in_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'b1 == A_in_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (1'b1 == A_in_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (1'b1 == A_in_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((grp_luDecomposition_fu_253_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if ((~((1'b1 == ap_block_state20_io) | (1'b1 == ap_block_state20)) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if ((~((1'b1 == ap_block_state21_io) | (1'b1 == ap_block_state21)) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((1'b1 == ap_block_state22_io) | (1'b1 == ap_block_state22)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if ((~((1'b1 == ap_block_state23_io) | (1'b1 == ap_block_state23)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if ((~((1'b1 == ap_block_state24_io) | (1'b1 == ap_block_state24)) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if ((~((1'b1 == ap_block_state53_io) | (1'b1 == ap_block_state53)) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if ((~((1'b1 == ap_block_state54_io) | (1'b1 == ap_block_state54)) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if ((~((1'b1 == ap_block_state55_io) | (1'b1 == ap_block_state55)) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if ((~((1'b1 == ap_block_state56_io) | (1'b1 == ap_block_state56)) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if ((~((1'b1 == ap_block_state57_io) | (1'b1 == ap_block_state57)) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if ((~((1'b1 == ap_block_state58_io) | (1'b1 == ap_block_state58)) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if ((~((1'b1 == ap_block_state59_io) | (1'b1 == ap_block_state59)) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if ((~((1'b1 == ap_block_state60_io) | (1'b1 == ap_block_state60)) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            if ((~((1'b1 == ap_block_state61_io) | (1'b1 == ap_block_state61)) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            if ((~((1'b1 == ap_block_state62_io) | (1'b1 == ap_block_state62)) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if ((~((1'b1 == ap_block_state63_io) | (1'b1 == ap_block_state63)) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            if ((~((1'b1 == ap_block_state64_io) | (1'b1 == ap_block_state64)) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            if ((~((1'b1 == ap_block_state65_io) | (1'b1 == ap_block_state65)) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_LU_out_TVALID = regslice_both_A_LU_out_U_vld_out;

assign A_addr_21_reg_785 = 64'd1;

assign A_addr_22_reg_790 = 64'd2;

assign A_addr_23_reg_795 = 64'd3;

assign A_addr_24_reg_800 = 64'd4;

assign A_addr_25_reg_805 = 64'd5;

assign A_addr_26_reg_810 = 64'd6;

assign A_addr_27_reg_815 = 64'd7;

assign A_addr_28_reg_820 = 64'd8;

assign A_addr_29_reg_825 = 64'd9;

assign A_addr_30_reg_830 = 64'd10;

assign A_addr_31_reg_835 = 64'd11;

assign A_addr_32_reg_840 = 64'd12;

assign A_addr_33_reg_845 = 64'd13;

assign A_addr_34_reg_850 = 64'd14;

assign A_addr_35_reg_855 = 64'd15;

assign A_addr_reg_780 = 64'd0;

assign A_in_TREADY = regslice_both_A_in_U_ack_in;

assign P_out_TVALID = regslice_both_P_out_U_vld_out;

assign Y_out_TVALID = regslice_both_Y_out_U_vld_out;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == A_in_TVALID_int_regslice) | (len_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state20 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == P_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state20_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == P_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state21 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == P_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state21_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == P_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state22 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == P_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state22_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == P_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state23 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == P_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state23_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == P_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state24 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == P_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state24_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == P_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state53 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state53_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state54 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state54_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state55 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state55_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state56 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state56_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state57 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state57_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state58 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state58_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state59 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state59_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state60 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state60_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state61 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state61_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state62 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state62_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state63 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state63_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state64 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state64_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state65 = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice) | (regslice_both_Y_out_U_apdone_blk == 1'b1) | (regslice_both_P_out_U_apdone_blk == 1'b1) | (regslice_both_A_LU_out_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state65_io = ((1'b0 == Y_out_TREADY_int_regslice) | (1'b0 == A_LU_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln204_10_fu_662_p1 = A_q0;

assign bitcast_ln204_11_fu_679_p1 = A_q0;

assign bitcast_ln204_12_fu_696_p1 = A_q0;

assign bitcast_ln204_13_fu_713_p1 = A_q0;

assign bitcast_ln204_14_fu_730_p1 = A_q0;

assign bitcast_ln204_15_fu_747_p1 = A_q0;

assign bitcast_ln204_1_fu_465_p1 = A_q0;

assign bitcast_ln204_2_fu_478_p1 = A_q0;

assign bitcast_ln204_3_fu_491_p1 = A_q0;

assign bitcast_ln204_4_fu_560_p1 = A_q0;

assign bitcast_ln204_5_fu_577_p1 = A_q0;

assign bitcast_ln204_6_fu_594_p1 = A_q0;

assign bitcast_ln204_7_fu_611_p1 = A_q0;

assign bitcast_ln204_8_fu_628_p1 = A_q0;

assign bitcast_ln204_9_fu_645_p1 = A_q0;

assign bitcast_ln204_fu_452_p1 = A_q0;

assign bitcast_ln228_10_fu_739_p1 = Y_3_2_reg_1000;

assign bitcast_ln228_11_fu_764_p1 = Y_3_3_reg_1005;

assign bitcast_ln228_1_fu_586_p1 = Y_1_1_reg_955;

assign bitcast_ln228_2_fu_603_p1 = Y_1_2_reg_960;

assign bitcast_ln228_3_fu_620_p1 = Y_1_3_reg_965;

assign bitcast_ln228_4_fu_637_p1 = Y_2_0_reg_970;

assign bitcast_ln228_5_fu_654_p1 = Y_2_1_reg_975;

assign bitcast_ln228_6_fu_671_p1 = Y_2_2_reg_980;

assign bitcast_ln228_7_fu_688_p1 = Y_2_3_reg_985;

assign bitcast_ln228_8_fu_705_p1 = Y_3_0_reg_990;

assign bitcast_ln228_9_fu_722_p1 = Y_3_1_reg_995;

assign bitcast_ln228_fu_569_p1 = Y_1_0_reg_950;

assign grp_luDecomposition_fu_253_ap_start = grp_luDecomposition_fu_253_ap_start_reg;

assign len_TREADY = regslice_both_len_U_ack_in;

assign pkt_data_10_fu_362_p1 = trunc_ln174_10_fu_358_p1;

assign pkt_data_11_fu_371_p1 = trunc_ln174_11_fu_367_p1;

assign pkt_data_12_fu_380_p1 = trunc_ln174_12_fu_376_p1;

assign pkt_data_13_fu_389_p1 = trunc_ln174_13_fu_385_p1;

assign pkt_data_14_fu_398_p1 = trunc_ln174_14_fu_394_p1;

assign pkt_data_15_fu_407_p1 = trunc_ln174_15_fu_403_p1;

assign pkt_data_1_fu_281_p1 = trunc_ln174_1_fu_277_p1;

assign pkt_data_2_fu_290_p1 = trunc_ln174_2_fu_286_p1;

assign pkt_data_3_fu_299_p1 = trunc_ln174_3_fu_295_p1;

assign pkt_data_4_fu_308_p1 = trunc_ln174_4_fu_304_p1;

assign pkt_data_5_fu_317_p1 = trunc_ln174_5_fu_313_p1;

assign pkt_data_6_fu_326_p1 = trunc_ln174_6_fu_322_p1;

assign pkt_data_7_fu_335_p1 = trunc_ln174_7_fu_331_p1;

assign pkt_data_8_fu_344_p1 = trunc_ln174_8_fu_340_p1;

assign pkt_data_9_fu_353_p1 = trunc_ln174_9_fu_349_p1;

assign pkt_data_fu_272_p1 = trunc_ln174_fu_268_p1;

assign trunc_ln174_10_fu_358_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_11_fu_367_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_12_fu_376_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_13_fu_385_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_14_fu_394_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_15_fu_403_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_1_fu_277_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_2_fu_286_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_3_fu_295_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_4_fu_304_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_5_fu_313_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_6_fu_322_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_7_fu_331_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_8_fu_340_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_9_fu_349_p1 = A_in_TDATA_int_regslice[31:0];

assign trunc_ln174_fu_268_p1 = A_in_TDATA_int_regslice[31:0];

assign zext_ln204_10_fu_666_p1 = bitcast_ln204_10_fu_662_p1;

assign zext_ln204_11_fu_683_p1 = bitcast_ln204_11_fu_679_p1;

assign zext_ln204_12_fu_700_p1 = bitcast_ln204_12_fu_696_p1;

assign zext_ln204_13_fu_717_p1 = bitcast_ln204_13_fu_713_p1;

assign zext_ln204_14_fu_734_p1 = bitcast_ln204_14_fu_730_p1;

assign zext_ln204_15_cast_fu_751_p3 = {{1'd1}, {bitcast_ln204_15_fu_747_p1}};

assign zext_ln204_15_fu_759_p1 = zext_ln204_15_cast_fu_751_p3;

assign zext_ln204_1_fu_469_p1 = bitcast_ln204_1_fu_465_p1;

assign zext_ln204_2_fu_482_p1 = bitcast_ln204_2_fu_478_p1;

assign zext_ln204_3_fu_495_p1 = bitcast_ln204_3_fu_491_p1;

assign zext_ln204_4_fu_564_p1 = bitcast_ln204_4_fu_560_p1;

assign zext_ln204_5_fu_581_p1 = bitcast_ln204_5_fu_577_p1;

assign zext_ln204_6_fu_598_p1 = bitcast_ln204_6_fu_594_p1;

assign zext_ln204_7_fu_615_p1 = bitcast_ln204_7_fu_611_p1;

assign zext_ln204_8_fu_632_p1 = bitcast_ln204_8_fu_628_p1;

assign zext_ln204_9_fu_649_p1 = bitcast_ln204_9_fu_645_p1;

assign zext_ln204_fu_456_p1 = bitcast_ln204_fu_452_p1;

assign zext_ln216_1_fu_474_p1 = P_1_reg_895;

assign zext_ln216_2_fu_487_p1 = P_2_reg_900;

assign zext_ln216_3_cast_fu_500_p3 = {{1'd1}, {P_3_reg_905}};

assign zext_ln216_3_fu_507_p1 = zext_ln216_3_cast_fu_500_p3;

assign zext_ln216_fu_461_p1 = P_0_reg_890;

assign zext_ln228_10_fu_742_p1 = bitcast_ln228_10_fu_739_p1;

assign zext_ln228_11_cast_fu_767_p3 = {{1'd1}, {bitcast_ln228_11_fu_764_p1}};

assign zext_ln228_11_fu_775_p1 = zext_ln228_11_cast_fu_767_p3;

assign zext_ln228_1_fu_589_p1 = bitcast_ln228_1_fu_586_p1;

assign zext_ln228_2_fu_606_p1 = bitcast_ln228_2_fu_603_p1;

assign zext_ln228_3_fu_623_p1 = bitcast_ln228_3_fu_620_p1;

assign zext_ln228_4_fu_640_p1 = bitcast_ln228_4_fu_637_p1;

assign zext_ln228_5_fu_657_p1 = bitcast_ln228_5_fu_654_p1;

assign zext_ln228_6_fu_674_p1 = bitcast_ln228_6_fu_671_p1;

assign zext_ln228_7_fu_691_p1 = bitcast_ln228_7_fu_688_p1;

assign zext_ln228_8_fu_708_p1 = bitcast_ln228_8_fu_705_p1;

assign zext_ln228_9_fu_725_p1 = bitcast_ln228_9_fu_722_p1;

assign zext_ln228_fu_572_p1 = bitcast_ln228_fu_569_p1;

endmodule //axi4_lu_forward
