// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module axi4_lu_forward_find_and_swap_pivot (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_we1,
        A_d1,
        A_q1,
        p_read,
        P_read_r,
        p_read1,
        P12_read,
        p_read2,
        P2_read,
        p_read3,
        P3_read,
        k,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [3:0] A_address1;
output   A_ce1;
output   A_we1;
output  [31:0] A_d1;
input  [31:0] A_q1;
input  [31:0] p_read;
input  [31:0] P_read_r;
input  [31:0] p_read1;
input  [31:0] P12_read;
input  [31:0] p_read2;
input  [31:0] P2_read;
input  [31:0] p_read3;
input  [31:0] P3_read;
input  [1:0] k;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] A_address0;
reg A_ce0;
reg A_we0;
reg[3:0] A_address1;
reg A_ce1;
reg A_we1;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_406;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg   [31:0] reg_412;
wire   [1:0] k_read_read_fu_86_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] k_cast1_fu_450_p1;
reg   [31:0] k_cast1_reg_891;
reg   [3:0] A_addr_2_reg_896;
reg   [3:0] A_addr_4_reg_901;
reg   [3:0] A_addr_6_reg_906;
reg   [3:0] A_addr_8_reg_911;
wire   [1:0] trunc_ln29_fu_534_p1;
reg   [1:0] trunc_ln29_reg_919;
wire    ap_CS_fsm_state3;
wire   [31:0] trunc_ln29_2_fu_542_p1;
reg   [31:0] trunc_ln29_2_reg_923;
wire   [0:0] icmp_ln36_fu_575_p2;
reg   [0:0] icmp_ln36_reg_936;
wire   [3:0] tmp_16_fu_580_p3;
reg   [3:0] tmp_16_reg_940;
reg   [3:0] A_addr_3_reg_946;
reg   [3:0] A_addr_5_reg_952;
wire   [31:0] tmpP_fu_604_p6;
reg   [31:0] tmpP_reg_958;
wire   [31:0] tmp_17_fu_614_p6;
reg   [31:0] tmp_17_reg_966;
wire   [31:0] max_val_2_fu_648_p1;
reg   [31:0] max_val_2_reg_982;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln30_fu_663_p2;
reg   [0:0] icmp_ln30_reg_988;
wire   [0:0] icmp_ln30_1_fu_669_p2;
reg   [0:0] icmp_ln30_1_reg_993;
wire   [31:0] pivot_5_fu_726_p3;
reg   [31:0] pivot_5_reg_998;
wire    ap_CS_fsm_state6;
wire   [31:0] max_val_3_fu_732_p3;
reg   [31:0] max_val_3_reg_1003;
reg   [3:0] A_addr_7_reg_1008;
reg   [3:0] A_addr_9_reg_1013;
reg   [0:0] write_flag4_0_reg_225;
wire    ap_CS_fsm_state12;
reg   [0:0] write_flag8_0_reg_241;
reg   [0:0] write_flag12_0_reg_257;
reg   [0:0] ap_phi_mux_write_flag4_2_phi_fu_277_p10;
reg   [0:0] write_flag4_2_reg_273;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln29_fu_546_p2;
reg   [31:0] ap_phi_mux_P12_2_phi_fu_298_p10;
reg   [31:0] P12_2_reg_294;
reg   [0:0] ap_phi_mux_write_flag8_2_phi_fu_315_p10;
reg   [0:0] write_flag8_2_reg_311;
reg   [31:0] ap_phi_mux_P210_2_phi_fu_336_p10;
reg   [31:0] P210_2_reg_332;
reg   [0:0] ap_phi_mux_write_flag12_2_phi_fu_353_p10;
reg   [0:0] write_flag12_2_reg_349;
reg   [31:0] ap_phi_mux_write_flag_1_phi_fu_373_p10;
reg   [31:0] write_flag_1_reg_370;
reg   [31:0] ap_phi_mux_P3_2_phi_fu_389_p10;
reg   [31:0] P3_2_reg_385;
wire   [63:0] zext_ln28_1_fu_430_p1;
wire   [63:0] zext_ln28_fu_460_p1;
wire   [63:0] zext_ln40_fu_471_p1;
wire   [63:0] zext_ln40_1_fu_482_p1;
wire   [63:0] zext_ln40_2_fu_493_p1;
wire   [63:0] zext_ln30_fu_559_p1;
wire   [63:0] zext_ln41_fu_588_p1;
wire   [63:0] zext_ln41_1_fu_599_p1;
wire   [63:0] zext_ln41_2_fu_751_p1;
wire   [63:0] zext_ln41_3_fu_761_p1;
reg   [31:0] pivot_fu_74;
wire    ap_CS_fsm_state7;
reg   [31:0] max_val_1_fu_78;
wire   [31:0] max_val_fu_514_p1;
reg   [32:0] pivot_1_fu_82;
wire   [32:0] add_ln29_fu_564_p2;
wire   [32:0] zext_ln29_fu_441_p1;
wire   [31:0] grp_fu_402_p0;
wire   [3:0] tmp_s_fu_422_p3;
wire   [2:0] k_cast_fu_418_p1;
wire   [2:0] i_fu_435_p2;
wire   [3:0] tmp_11_fu_453_p3;
wire   [3:0] or_ln40_fu_465_p2;
wire   [3:0] or_ln40_1_fu_476_p2;
wire   [3:0] or_ln40_2_fu_487_p2;
wire   [31:0] data_fu_498_p1;
wire   [30:0] trunc_ln313_fu_502_p1;
wire   [31:0] t_fu_506_p3;
wire   [1:0] trunc_ln29_1_fu_538_p1;
wire   [3:0] tmp_12_fu_552_p3;
wire   [3:0] or_ln41_fu_593_p2;
wire   [31:0] tmpP_fu_604_p1;
wire   [31:0] data_1_fu_628_p1;
wire   [30:0] trunc_ln313_1_fu_632_p1;
wire   [31:0] t_1_fu_640_p3;
wire   [7:0] tmp_13_fu_653_p4;
wire   [22:0] trunc_ln30_fu_636_p1;
wire   [31:0] bitcast_ln30_fu_675_p1;
wire   [7:0] tmp_14_fu_678_p4;
wire   [22:0] trunc_ln30_1_fu_688_p1;
wire   [0:0] icmp_ln30_3_fu_702_p2;
wire   [0:0] icmp_ln30_2_fu_696_p2;
wire   [0:0] or_ln30_fu_692_p2;
wire   [0:0] or_ln30_1_fu_708_p2;
wire   [0:0] and_ln30_fu_714_p2;
wire   [0:0] grp_fu_402_p2;
wire   [0:0] and_ln30_1_fu_720_p2;
wire   [3:0] or_ln41_1_fu_746_p2;
wire   [3:0] or_ln41_2_fu_756_p2;
wire   [31:0] mrv_sel16_fu_766_p3;
wire   [31:0] mrv_sel19_fu_773_p3;
wire   [31:0] mrv_sel22_fu_780_p3;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 pivot_fu_74 = 32'd0;
#0 max_val_1_fu_78 = 32'd0;
#0 pivot_1_fu_82 = 33'd0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
end

axi4_lu_forward_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_402_p0),
    .din1(max_val_1_fu_78),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_402_p2)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U5(
    .din0(tmpP_fu_604_p1),
    .din1(P12_read),
    .din2(P2_read),
    .din3(P3_read),
    .din4(k),
    .dout(tmpP_fu_604_p6)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U6(
    .din0(P_read_r),
    .din1(P12_read),
    .din2(P2_read),
    .din3(P3_read),
    .din4(trunc_ln29_fu_534_p1),
    .dout(tmp_17_fu_614_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_return_0_preg <= ap_phi_mux_write_flag_1_phi_fu_373_p10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_return_1_preg <= mrv_sel16_fu_766_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_return_2_preg <= mrv_sel19_fu_773_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_return_3_preg <= mrv_sel22_fu_780_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1))) begin
        P12_2_reg_294 <= tmpP_reg_958;
    end else if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3)))) begin
        P12_2_reg_294 <= tmp_17_reg_966;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2))) begin
        P210_2_reg_332 <= tmpP_reg_958;
    end else if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3)))) begin
        P210_2_reg_332 <= tmp_17_reg_966;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2)))) begin
        P3_2_reg_385 <= tmp_17_reg_966;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3))) begin
        P3_2_reg_385 <= tmpP_reg_958;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        max_val_1_fu_78 <= max_val_fu_514_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        max_val_1_fu_78 <= max_val_3_reg_1003;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pivot_1_fu_82 <= zext_ln29_fu_441_p1;
    end else if (((icmp_ln29_fu_546_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        pivot_1_fu_82 <= add_ln29_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pivot_fu_74 <= k_cast1_fu_450_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        pivot_fu_74 <= pivot_5_reg_998;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_406 <= A_q1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_406 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_412 <= A_q1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_412 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((k_read_read_fu_86_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state12)) | ((k_read_read_fu_86_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state12)))) begin
        write_flag12_0_reg_257 <= 1'd0;
    end else if ((~(k_read_read_fu_86_p2 == 2'd1) & ~(k_read_read_fu_86_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state12))) begin
        write_flag12_0_reg_257 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_546_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln36_fu_575_p2 == 1'd1))) begin
        write_flag12_2_reg_349 <= 1'd0;
    end else if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2)))) begin
        write_flag12_2_reg_349 <= write_flag12_0_reg_257;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3))) begin
        write_flag12_2_reg_349 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((k_read_read_fu_86_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        write_flag4_0_reg_225 <= 1'd1;
    end else if (((~(k_read_read_fu_86_p2 == 2'd1) & ~(k_read_read_fu_86_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state12)) | ((k_read_read_fu_86_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state12)))) begin
        write_flag4_0_reg_225 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_546_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln36_fu_575_p2 == 1'd1))) begin
        write_flag4_2_reg_273 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1))) begin
        write_flag4_2_reg_273 <= 1'd1;
    end else if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3)))) begin
        write_flag4_2_reg_273 <= write_flag4_0_reg_225;
    end
end

always @ (posedge ap_clk) begin
    if (((k_read_read_fu_86_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state12))) begin
        write_flag8_0_reg_241 <= 1'd1;
    end else if (((~(k_read_read_fu_86_p2 == 2'd1) & ~(k_read_read_fu_86_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state12)) | ((k_read_read_fu_86_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state12)))) begin
        write_flag8_0_reg_241 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_546_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln36_fu_575_p2 == 1'd1))) begin
        write_flag8_2_reg_311 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2))) begin
        write_flag8_2_reg_311 <= 1'd1;
    end else if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3)))) begin
        write_flag8_2_reg_311 <= write_flag8_0_reg_241;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0))) begin
        write_flag_1_reg_370 <= tmpP_reg_958;
    end else if ((((icmp_ln29_fu_546_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln36_fu_575_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3)))) begin
        write_flag_1_reg_370 <= p_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_addr_2_reg_896[3 : 2] <= zext_ln28_fu_460_p1[3 : 2];
        A_addr_4_reg_901[3 : 2] <= zext_ln40_fu_471_p1[3 : 2];
        A_addr_6_reg_906[3 : 2] <= zext_ln40_1_fu_482_p1[3 : 2];
        A_addr_8_reg_911[3 : 2] <= zext_ln40_2_fu_493_p1[3 : 2];
        k_cast1_reg_891[1 : 0] <= k_cast1_fu_450_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_addr_3_reg_946[3 : 2] <= zext_ln41_fu_588_p1[3 : 2];
        A_addr_5_reg_952[3 : 2] <= zext_ln41_1_fu_599_p1[3 : 2];
        icmp_ln36_reg_936 <= icmp_ln36_fu_575_p2;
        tmpP_reg_958 <= tmpP_fu_604_p6;
        tmp_16_reg_940[3 : 2] <= tmp_16_fu_580_p3[3 : 2];
        tmp_17_reg_966 <= tmp_17_fu_614_p6;
        trunc_ln29_2_reg_923 <= trunc_ln29_2_fu_542_p1;
        trunc_ln29_reg_919 <= trunc_ln29_fu_534_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        A_addr_7_reg_1008[3 : 2] <= zext_ln41_2_fu_751_p1[3 : 2];
        A_addr_9_reg_1013[3 : 2] <= zext_ln41_3_fu_761_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln30_1_reg_993 <= icmp_ln30_1_fu_669_p2;
        icmp_ln30_reg_988 <= icmp_ln30_fu_663_p2;
        max_val_2_reg_982[30 : 0] <= max_val_2_fu_648_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_val_3_reg_1003 <= max_val_3_fu_732_p3;
        pivot_5_reg_998 <= pivot_5_fu_726_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        A_address0 = A_addr_7_reg_1008;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        A_address0 = A_addr_3_reg_946;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address0 = A_addr_6_reg_906;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_address0 = A_addr_2_reg_896;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address0 = zext_ln41_2_fu_751_p1;
    end else if (((icmp_ln29_fu_546_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln36_fu_575_p2 == 1'd0))) begin
        A_address0 = zext_ln41_1_fu_599_p1;
    end else if (((icmp_ln29_fu_546_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        A_address0 = zext_ln30_fu_559_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        A_address0 = zext_ln28_1_fu_430_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        A_address1 = A_addr_9_reg_1013;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        A_address1 = A_addr_5_reg_952;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address1 = A_addr_8_reg_911;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_address1 = A_addr_4_reg_901;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address1 = zext_ln41_3_fu_761_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address1 = zext_ln41_fu_588_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((icmp_ln29_fu_546_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln29_fu_546_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln36_fu_575_p2 == 1'd0)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state3))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1))) begin
        ap_phi_mux_P12_2_phi_fu_298_p10 = tmpP_reg_958;
    end else if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3)))) begin
        ap_phi_mux_P12_2_phi_fu_298_p10 = tmp_17_reg_966;
    end else begin
        ap_phi_mux_P12_2_phi_fu_298_p10 = P12_2_reg_294;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2))) begin
        ap_phi_mux_P210_2_phi_fu_336_p10 = tmpP_reg_958;
    end else if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3)))) begin
        ap_phi_mux_P210_2_phi_fu_336_p10 = tmp_17_reg_966;
    end else begin
        ap_phi_mux_P210_2_phi_fu_336_p10 = P210_2_reg_332;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2)))) begin
        ap_phi_mux_P3_2_phi_fu_389_p10 = tmp_17_reg_966;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3))) begin
        ap_phi_mux_P3_2_phi_fu_389_p10 = tmpP_reg_958;
    end else begin
        ap_phi_mux_P3_2_phi_fu_389_p10 = P3_2_reg_385;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2)))) begin
        ap_phi_mux_write_flag12_2_phi_fu_353_p10 = write_flag12_0_reg_257;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3))) begin
        ap_phi_mux_write_flag12_2_phi_fu_353_p10 = 1'd1;
    end else begin
        ap_phi_mux_write_flag12_2_phi_fu_353_p10 = write_flag12_2_reg_349;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1))) begin
        ap_phi_mux_write_flag4_2_phi_fu_277_p10 = 1'd1;
    end else if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3)))) begin
        ap_phi_mux_write_flag4_2_phi_fu_277_p10 = write_flag4_0_reg_225;
    end else begin
        ap_phi_mux_write_flag4_2_phi_fu_277_p10 = write_flag4_2_reg_273;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2))) begin
        ap_phi_mux_write_flag8_2_phi_fu_315_p10 = 1'd1;
    end else if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3)))) begin
        ap_phi_mux_write_flag8_2_phi_fu_315_p10 = write_flag8_0_reg_241;
    end else begin
        ap_phi_mux_write_flag8_2_phi_fu_315_p10 = write_flag8_2_reg_311;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd0))) begin
        ap_phi_mux_write_flag_1_phi_fu_373_p10 = tmpP_reg_958;
    end else if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd1)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd2)) | ((1'b1 == ap_CS_fsm_state13) & (icmp_ln36_reg_936 == 1'd0) & (trunc_ln29_reg_919 == 2'd3)))) begin
        ap_phi_mux_write_flag_1_phi_fu_373_p10 = p_read;
    end else begin
        ap_phi_mux_write_flag_1_phi_fu_373_p10 = write_flag_1_reg_370;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_return_0 = ap_phi_mux_write_flag_1_phi_fu_373_p10;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_return_1 = mrv_sel16_fu_766_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_return_2 = mrv_sel19_fu_773_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_return_3 = mrv_sel22_fu_780_p3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln29_fu_546_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln36_fu_575_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if (((icmp_ln29_fu_546_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln36_fu_575_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = reg_406;

assign A_d1 = reg_412;

assign add_ln29_fu_564_p2 = (pivot_1_fu_82 + 33'd1);

assign and_ln30_1_fu_720_p2 = (grp_fu_402_p2 & and_ln30_fu_714_p2);

assign and_ln30_fu_714_p2 = (or_ln30_fu_692_p2 & or_ln30_1_fu_708_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln30_fu_675_p1 = max_val_1_fu_78;

assign data_1_fu_628_p1 = reg_406;

assign data_fu_498_p1 = A_q0;

assign grp_fu_402_p0 = t_1_fu_640_p3;

assign i_fu_435_p2 = (k_cast_fu_418_p1 + 3'd1);

assign icmp_ln29_fu_546_p2 = ((trunc_ln29_2_fu_542_p1 == 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln30_1_fu_669_p2 = ((trunc_ln30_fu_636_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_2_fu_696_p2 = ((tmp_14_fu_678_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln30_3_fu_702_p2 = ((trunc_ln30_1_fu_688_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_663_p2 = ((tmp_13_fu_653_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_575_p2 = ((pivot_fu_74 == k_cast1_reg_891) ? 1'b1 : 1'b0);

assign k_cast1_fu_450_p1 = k;

assign k_cast_fu_418_p1 = k;

assign k_read_read_fu_86_p2 = k;

assign max_val_2_fu_648_p1 = t_1_fu_640_p3;

assign max_val_3_fu_732_p3 = ((and_ln30_1_fu_720_p2[0:0] == 1'b1) ? max_val_2_reg_982 : max_val_1_fu_78);

assign max_val_fu_514_p1 = t_fu_506_p3;

assign mrv_sel16_fu_766_p3 = ((ap_phi_mux_write_flag4_2_phi_fu_277_p10[0:0] == 1'b1) ? ap_phi_mux_P12_2_phi_fu_298_p10 : p_read1);

assign mrv_sel19_fu_773_p3 = ((ap_phi_mux_write_flag8_2_phi_fu_315_p10[0:0] == 1'b1) ? ap_phi_mux_P210_2_phi_fu_336_p10 : p_read2);

assign mrv_sel22_fu_780_p3 = ((ap_phi_mux_write_flag12_2_phi_fu_353_p10[0:0] == 1'b1) ? ap_phi_mux_P3_2_phi_fu_389_p10 : p_read3);

assign or_ln30_1_fu_708_p2 = (icmp_ln30_3_fu_702_p2 | icmp_ln30_2_fu_696_p2);

assign or_ln30_fu_692_p2 = (icmp_ln30_reg_988 | icmp_ln30_1_reg_993);

assign or_ln40_1_fu_476_p2 = (tmp_11_fu_453_p3 | 4'd2);

assign or_ln40_2_fu_487_p2 = (tmp_11_fu_453_p3 | 4'd3);

assign or_ln40_fu_465_p2 = (tmp_11_fu_453_p3 | 4'd1);

assign or_ln41_1_fu_746_p2 = (tmp_16_reg_940 | 4'd2);

assign or_ln41_2_fu_756_p2 = (tmp_16_reg_940 | 4'd3);

assign or_ln41_fu_593_p2 = (tmp_16_fu_580_p3 | 4'd1);

assign pivot_5_fu_726_p3 = ((and_ln30_1_fu_720_p2[0:0] == 1'b1) ? trunc_ln29_2_reg_923 : pivot_fu_74);

assign t_1_fu_640_p3 = {{1'd0}, {trunc_ln313_1_fu_632_p1}};

assign t_fu_506_p3 = {{1'd0}, {trunc_ln313_fu_502_p1}};

assign tmpP_fu_604_p1 = 'bx;

assign tmp_11_fu_453_p3 = {{k}, {2'd0}};

assign tmp_12_fu_552_p3 = {{trunc_ln29_1_fu_538_p1}, {k}};

assign tmp_13_fu_653_p4 = {{data_1_fu_628_p1[30:23]}};

assign tmp_14_fu_678_p4 = {{bitcast_ln30_fu_675_p1[30:23]}};

assign tmp_16_fu_580_p3 = {{trunc_ln29_fu_534_p1}, {2'd0}};

assign tmp_s_fu_422_p3 = {{k}, {k}};

assign trunc_ln29_1_fu_538_p1 = pivot_1_fu_82[1:0];

assign trunc_ln29_2_fu_542_p1 = pivot_1_fu_82[31:0];

assign trunc_ln29_fu_534_p1 = pivot_fu_74[1:0];

assign trunc_ln30_1_fu_688_p1 = bitcast_ln30_fu_675_p1[22:0];

assign trunc_ln30_fu_636_p1 = data_1_fu_628_p1[22:0];

assign trunc_ln313_1_fu_632_p1 = data_1_fu_628_p1[30:0];

assign trunc_ln313_fu_502_p1 = data_fu_498_p1[30:0];

assign zext_ln28_1_fu_430_p1 = tmp_s_fu_422_p3;

assign zext_ln28_fu_460_p1 = tmp_11_fu_453_p3;

assign zext_ln29_fu_441_p1 = i_fu_435_p2;

assign zext_ln30_fu_559_p1 = tmp_12_fu_552_p3;

assign zext_ln40_1_fu_482_p1 = or_ln40_1_fu_476_p2;

assign zext_ln40_2_fu_493_p1 = or_ln40_2_fu_487_p2;

assign zext_ln40_fu_471_p1 = or_ln40_fu_465_p2;

assign zext_ln41_1_fu_599_p1 = or_ln41_fu_593_p2;

assign zext_ln41_2_fu_751_p1 = or_ln41_1_fu_746_p2;

assign zext_ln41_3_fu_761_p1 = or_ln41_2_fu_756_p2;

assign zext_ln41_fu_588_p1 = tmp_16_fu_580_p3;

always @ (posedge ap_clk) begin
    k_cast1_reg_891[31:2] <= 30'b000000000000000000000000000000;
    A_addr_2_reg_896[1:0] <= 2'b00;
    A_addr_4_reg_901[1:0] <= 2'b01;
    A_addr_6_reg_906[1:0] <= 2'b10;
    A_addr_8_reg_911[1:0] <= 2'b11;
    tmp_16_reg_940[1:0] <= 2'b00;
    A_addr_3_reg_946[1:0] <= 2'b00;
    A_addr_5_reg_952[1:0] <= 2'b01;
    max_val_2_reg_982[31] <= 1'b0;
    A_addr_7_reg_1008[1:0] <= 2'b10;
    A_addr_9_reg_1013[1:0] <= 2'b11;
end

endmodule //axi4_lu_forward_find_and_swap_pivot
