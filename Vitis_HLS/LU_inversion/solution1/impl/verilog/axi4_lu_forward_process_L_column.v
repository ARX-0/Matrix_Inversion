// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module axi4_lu_forward_process_L_column (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        L_0,
        L_01,
        L_02,
        L_03,
        L_1_i,
        L_1_o,
        L_1_o_ap_vld,
        L_14_i,
        L_14_o,
        L_14_o_ap_vld,
        L_15_i,
        L_15_o,
        L_15_o_ap_vld,
        L_16_i,
        L_16_o,
        L_16_o_ap_vld,
        L_2_i,
        L_2_o,
        L_2_o_ap_vld,
        L_27_i,
        L_27_o,
        L_27_o_ap_vld,
        L_28_i,
        L_28_o,
        L_28_o_ap_vld,
        L_29_i,
        L_29_o,
        L_29_o_ap_vld,
        L_3,
        L_3_ap_vld,
        L_310,
        L_310_ap_vld,
        L_311,
        L_311_ap_vld,
        L_312,
        L_312_ap_vld,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        k
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
input  [31:0] L_0;
input  [31:0] L_01;
input  [31:0] L_02;
input  [31:0] L_03;
input  [31:0] L_1_i;
output  [31:0] L_1_o;
output   L_1_o_ap_vld;
input  [31:0] L_14_i;
output  [31:0] L_14_o;
output   L_14_o_ap_vld;
input  [31:0] L_15_i;
output  [31:0] L_15_o;
output   L_15_o_ap_vld;
input  [31:0] L_16_i;
output  [31:0] L_16_o;
output   L_16_o_ap_vld;
input  [31:0] L_2_i;
output  [31:0] L_2_o;
output   L_2_o_ap_vld;
input  [31:0] L_27_i;
output  [31:0] L_27_o;
output   L_27_o_ap_vld;
input  [31:0] L_28_i;
output  [31:0] L_28_o;
output   L_28_o_ap_vld;
input  [31:0] L_29_i;
output  [31:0] L_29_o;
output   L_29_o_ap_vld;
output  [31:0] L_3;
output   L_3_ap_vld;
output  [31:0] L_310;
output   L_310_ap_vld;
output  [31:0] L_311;
output   L_311_ap_vld;
output  [31:0] L_312;
output   L_312_ap_vld;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
input  [31:0] p_read11;
input  [1:0] k;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg[31:0] L_1_o;
reg L_1_o_ap_vld;
reg[31:0] L_14_o;
reg L_14_o_ap_vld;
reg[31:0] L_15_o;
reg L_15_o_ap_vld;
reg[31:0] L_16_o;
reg L_16_o_ap_vld;
reg[31:0] L_2_o;
reg L_2_o_ap_vld;
reg[31:0] L_27_o;
reg L_27_o_ap_vld;
reg[31:0] L_28_o;
reg L_28_o_ap_vld;
reg[31:0] L_29_o;
reg L_29_o_ap_vld;
reg L_3_ap_vld;
reg L_310_ap_vld;
reg L_311_ap_vld;
reg[31:0] L_312;
reg L_312_ap_vld;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] k_read_read_fu_120_p2;
wire   [31:0] tmp_fu_470_p9;
reg   [31:0] tmp_reg_728;
wire   [1:0] trunc_ln66_fu_502_p1;
reg   [1:0] trunc_ln66_reg_756;
wire    ap_CS_fsm_state2;
reg   [3:0] A_addr_reg_763;
wire   [31:0] tmp_4_fu_528_p6;
reg   [31:0] tmp_4_reg_768;
wire   [31:0] tmp_5_fu_538_p6;
reg   [31:0] tmp_5_reg_773;
wire   [31:0] tmp_6_fu_552_p6;
reg   [31:0] tmp_6_reg_778;
wire   [1:0] select_ln69_fu_571_p3;
reg   [1:0] select_ln69_reg_783;
wire   [1:0] add_ln69_fu_583_p2;
reg   [1:0] add_ln69_reg_791;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_2_fu_589_p9;
reg   [31:0] tmp_2_reg_796;
wire   [31:0] tmp_3_fu_639_p9;
reg   [31:0] tmp_3_reg_801;
wire   [31:0] grp_fu_398_p2;
reg   [31:0] mul_reg_806;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_392_p2;
wire    ap_CS_fsm_state12;
reg   [31:0] A_load_reg_816;
wire    ap_CS_fsm_state13;
reg   [31:0] sub_reg_821;
wire    ap_CS_fsm_state18;
reg   [1:0] p_reg_369;
wire   [0:0] icmp_ln66_fu_510_p2;
reg   [31:0] sum_reg_380;
wire   [63:0] zext_ln73_fu_523_p1;
reg   [32:0] i_1_fu_116;
wire   [32:0] add_ln66_fu_658_p2;
wire   [32:0] zext_ln66_fu_490_p1;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_402_p2;
reg   [31:0] grp_fu_392_p0;
reg   [31:0] grp_fu_392_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state19;
wire   [2:0] k_cast_fu_418_p1;
wire   [31:0] tmp_9_fu_428_p1;
wire   [31:0] tmp_s_fu_442_p1;
wire   [31:0] tmp_1_fu_456_p1;
wire   [31:0] tmp_9_fu_428_p6;
wire   [31:0] tmp_s_fu_442_p6;
wire   [31:0] tmp_1_fu_456_p6;
wire   [31:0] tmp_fu_470_p7;
wire   [2:0] i_fu_422_p2;
wire   [31:0] trunc_ln66_1_fu_506_p1;
wire   [3:0] tmp_10_fu_516_p3;
wire   [0:0] icmp_ln69_fu_566_p2;
wire   [31:0] tmp_2_fu_589_p7;
wire   [31:0] tmp_7_fu_606_p4;
wire   [31:0] tmp_8_fu_617_p4;
wire   [31:0] tmp_11_fu_628_p4;
wire   [31:0] tmp_7_fu_606_p6;
wire   [31:0] tmp_8_fu_617_p6;
wire   [31:0] tmp_11_fu_628_p6;
wire   [31:0] tmp_3_fu_639_p7;
reg   [1:0] grp_fu_392_opcode;
wire   [0:0] icmp_ln69_1_fu_578_p2;
reg   [33:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire   [1:0] tmp_fu_470_p1;
wire  signed [1:0] tmp_fu_470_p3;
wire  signed [1:0] tmp_fu_470_p5;
wire   [1:0] tmp_2_fu_589_p1;
wire   [1:0] tmp_2_fu_589_p3;
wire  signed [1:0] tmp_2_fu_589_p5;
wire   [1:0] tmp_3_fu_639_p1;
wire  signed [1:0] tmp_3_fu_639_p3;
wire  signed [1:0] tmp_3_fu_639_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
#0 i_1_fu_116 = 33'd0;
end

axi4_lu_forward_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_392_p0),
    .din1(grp_fu_392_p1),
    .opcode(grp_fu_392_opcode),
    .ce(1'b1),
    .dout(grp_fu_392_p2)
);

axi4_lu_forward_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_reg_796),
    .din1(tmp_3_reg_801),
    .ce(1'b1),
    .dout(grp_fu_398_p2)
);

axi4_lu_forward_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_reg_821),
    .din1(tmp_reg_728),
    .ce(1'b1),
    .dout(grp_fu_402_p2)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U64(
    .din0(tmp_9_fu_428_p1),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .din4(k),
    .dout(tmp_9_fu_428_p6)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U65(
    .din0(tmp_s_fu_442_p1),
    .din1(p_read5),
    .din2(p_read6),
    .din3(p_read7),
    .din4(k),
    .dout(tmp_s_fu_442_p6)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U66(
    .din0(tmp_1_fu_456_p1),
    .din1(p_read9),
    .din2(p_read10),
    .din3(p_read11),
    .din4(k),
    .dout(tmp_1_fu_456_p6)
);

axi4_lu_forward_sparsemux_7_2_32_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h1 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h2 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h3 ),
    .din2_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_7_2_32_1_1_x_U67(
    .din0(tmp_9_fu_428_p6),
    .din1(tmp_s_fu_442_p6),
    .din2(tmp_1_fu_456_p6),
    .def(tmp_fu_470_p7),
    .sel(k),
    .dout(tmp_fu_470_p9)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U68(
    .din0(L_0),
    .din1(L_01),
    .din2(L_02),
    .din3(L_03),
    .din4(trunc_ln66_fu_502_p1),
    .dout(tmp_4_fu_528_p6)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U69(
    .din0(L_1_i),
    .din1(L_14_i),
    .din2(L_15_i),
    .din3(L_16_i),
    .din4(trunc_ln66_fu_502_p1),
    .dout(tmp_5_fu_538_p6)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U70(
    .din0(L_2_i),
    .din1(L_27_i),
    .din2(L_28_i),
    .din3(L_29_i),
    .din4(trunc_ln66_fu_502_p1),
    .dout(tmp_6_fu_552_p6)
);

axi4_lu_forward_sparsemux_7_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_7_2_32_1_1_U71(
    .din0(tmp_4_reg_768),
    .din1(tmp_5_reg_773),
    .din2(tmp_6_reg_778),
    .def(tmp_2_fu_589_p7),
    .sel(p_reg_369),
    .dout(tmp_2_fu_589_p9)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U72(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(tmp_7_fu_606_p4),
    .din4(p_reg_369),
    .dout(tmp_7_fu_606_p6)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U73(
    .din0(p_read4),
    .din1(p_read5),
    .din2(p_read6),
    .din3(tmp_8_fu_617_p4),
    .din4(p_reg_369),
    .dout(tmp_8_fu_617_p6)
);

axi4_lu_forward_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U74(
    .din0(p_read8),
    .din1(p_read9),
    .din2(p_read10),
    .din3(tmp_11_fu_628_p4),
    .din4(p_reg_369),
    .dout(tmp_11_fu_628_p6)
);

axi4_lu_forward_sparsemux_7_2_32_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h1 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h2 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h3 ),
    .din2_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_7_2_32_1_1_x_U75(
    .din0(tmp_7_fu_606_p6),
    .din1(tmp_8_fu_617_p6),
    .din2(tmp_11_fu_628_p6),
    .def(tmp_3_fu_639_p7),
    .sel(k),
    .dout(tmp_3_fu_639_p9)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_fu_116 <= zext_ln66_fu_490_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        i_1_fu_116 <= add_ln66_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_510_p2 == 1'd0))) begin
        p_reg_369 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        p_reg_369 <= add_ln69_reg_791;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_510_p2 == 1'd0))) begin
        sum_reg_380 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sum_reg_380 <= grp_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_addr_reg_763 <= zext_ln73_fu_523_p1;
        select_ln69_reg_783 <= select_ln69_fu_571_p3;
        tmp_4_reg_768 <= tmp_4_fu_528_p6;
        tmp_5_reg_773 <= tmp_5_fu_538_p6;
        tmp_6_reg_778 <= tmp_6_fu_552_p6;
        trunc_ln66_reg_756 <= trunc_ln66_fu_502_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        A_load_reg_816 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln69_reg_791 <= add_ln69_fu_583_p2;
        tmp_2_reg_796 <= tmp_2_fu_589_p9;
        tmp_3_reg_801 <= tmp_3_fu_639_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_reg_806 <= grp_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        sub_reg_821 <= grp_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_reg_728 <= tmp_fu_470_p9;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((k_read_read_fu_120_p2 == 2'd1)) begin
        if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd1))) begin
            L_14_o = grp_fu_402_p2;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_510_p2 == 1'd1))) begin
            L_14_o = 32'd1065353216;
        end else begin
            L_14_o = L_14_i;
        end
    end else begin
        L_14_o = L_14_i;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd1) & (k_read_read_fu_120_p2 == 2'd1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_510_p2 == 1'd1) & (k_read_read_fu_120_p2 == 2'd1)))) begin
        L_14_o_ap_vld = 1'b1;
    end else begin
        L_14_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd2) & (k_read_read_fu_120_p2 == 2'd1))) begin
        L_15_o = grp_fu_402_p2;
    end else begin
        L_15_o = L_15_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd2) & (k_read_read_fu_120_p2 == 2'd1))) begin
        L_15_o_ap_vld = 1'b1;
    end else begin
        L_15_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd3) & (k_read_read_fu_120_p2 == 2'd1))) begin
        L_16_o = grp_fu_402_p2;
    end else begin
        L_16_o = L_16_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd3) & (k_read_read_fu_120_p2 == 2'd1))) begin
        L_16_o_ap_vld = 1'b1;
    end else begin
        L_16_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd0) & (k_read_read_fu_120_p2 == 2'd1))) begin
        L_1_o = grp_fu_402_p2;
    end else begin
        L_1_o = L_1_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd0) & (k_read_read_fu_120_p2 == 2'd1))) begin
        L_1_o_ap_vld = 1'b1;
    end else begin
        L_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd1) & (k_read_read_fu_120_p2 == 2'd2))) begin
        L_27_o = grp_fu_402_p2;
    end else begin
        L_27_o = L_27_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd1) & (k_read_read_fu_120_p2 == 2'd2))) begin
        L_27_o_ap_vld = 1'b1;
    end else begin
        L_27_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((k_read_read_fu_120_p2 == 2'd2)) begin
        if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd2))) begin
            L_28_o = grp_fu_402_p2;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_510_p2 == 1'd1))) begin
            L_28_o = 32'd1065353216;
        end else begin
            L_28_o = L_28_i;
        end
    end else begin
        L_28_o = L_28_i;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd2) & (k_read_read_fu_120_p2 == 2'd2)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_510_p2 == 1'd1) & (k_read_read_fu_120_p2 == 2'd2)))) begin
        L_28_o_ap_vld = 1'b1;
    end else begin
        L_28_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd3) & (k_read_read_fu_120_p2 == 2'd2))) begin
        L_29_o = grp_fu_402_p2;
    end else begin
        L_29_o = L_29_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd3) & (k_read_read_fu_120_p2 == 2'd2))) begin
        L_29_o_ap_vld = 1'b1;
    end else begin
        L_29_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd0) & (k_read_read_fu_120_p2 == 2'd2))) begin
        L_2_o = grp_fu_402_p2;
    end else begin
        L_2_o = L_2_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd0) & (k_read_read_fu_120_p2 == 2'd2))) begin
        L_2_o_ap_vld = 1'b1;
    end else begin
        L_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(k_read_read_fu_120_p2 == 2'd2) & ~(k_read_read_fu_120_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd1))) begin
        L_310_ap_vld = 1'b1;
    end else begin
        L_310_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(k_read_read_fu_120_p2 == 2'd2) & ~(k_read_read_fu_120_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd2))) begin
        L_311_ap_vld = 1'b1;
    end else begin
        L_311_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(k_read_read_fu_120_p2 == 2'd2) & ~(k_read_read_fu_120_p2 == 2'd1))) begin
        if (((1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd3))) begin
            L_312 = grp_fu_402_p2;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_510_p2 == 1'd1))) begin
            L_312 = 32'd1065353216;
        end else begin
            L_312 = 'bx;
        end
    end else begin
        L_312 = 'bx;
    end
end

always @ (*) begin
    if (((~(k_read_read_fu_120_p2 == 2'd2) & ~(k_read_read_fu_120_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd3)) | (~(k_read_read_fu_120_p2 == 2'd2) & ~(k_read_read_fu_120_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_510_p2 == 1'd1)))) begin
        L_312_ap_vld = 1'b1;
    end else begin
        L_312_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(k_read_read_fu_120_p2 == 2'd2) & ~(k_read_read_fu_120_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state34) & (trunc_ln66_reg_756 == 2'd0))) begin
        L_3_ap_vld = 1'b1;
    end else begin
        L_3_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_510_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_510_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_392_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_392_opcode = 2'd0;
    end else begin
        grp_fu_392_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_392_p0 = A_load_reg_816;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_392_p0 = sum_reg_380;
    end else begin
        grp_fu_392_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_392_p1 = sum_reg_380;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_392_p1 = mul_reg_806;
    end else begin
        grp_fu_392_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_510_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln69_1_fu_578_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = A_addr_reg_763;

assign L_3 = grp_fu_402_p2;

assign L_310 = grp_fu_402_p2;

assign L_311 = grp_fu_402_p2;

assign add_ln66_fu_658_p2 = (i_1_fu_116 + 33'd1);

assign add_ln69_fu_583_p2 = (p_reg_369 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign i_fu_422_p2 = (k_cast_fu_418_p1 + 3'd1);

assign icmp_ln66_fu_510_p2 = ((trunc_ln66_1_fu_506_p1 == 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln69_1_fu_578_p2 = ((p_reg_369 == select_ln69_reg_783) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_566_p2 = ((k != 2'd0) ? 1'b1 : 1'b0);

assign k_cast_fu_418_p1 = k;

assign k_read_read_fu_120_p2 = k;

assign select_ln69_fu_571_p3 = ((icmp_ln69_fu_566_p2[0:0] == 1'b1) ? k : 2'd1);

assign tmp_10_fu_516_p3 = {{trunc_ln66_fu_502_p1}, {k}};

assign tmp_11_fu_628_p4 = 'bx;

assign tmp_1_fu_456_p1 = 'bx;

assign tmp_2_fu_589_p7 = 'bx;

assign tmp_3_fu_639_p7 = 'bx;

assign tmp_7_fu_606_p4 = 'bx;

assign tmp_8_fu_617_p4 = 'bx;

assign tmp_9_fu_428_p1 = 'bx;

assign tmp_fu_470_p7 = 'bx;

assign tmp_s_fu_442_p1 = 'bx;

assign trunc_ln66_1_fu_506_p1 = i_1_fu_116[31:0];

assign trunc_ln66_fu_502_p1 = i_1_fu_116[1:0];

assign zext_ln66_fu_490_p1 = i_fu_422_p2;

assign zext_ln73_fu_523_p1 = tmp_10_fu_516_p3;

endmodule //axi4_lu_forward_process_L_column
