-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi4_lu_forward_process_U_row is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    U_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    U_013_i : IN STD_LOGIC_VECTOR (31 downto 0);
    U_013_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    U_013_o_ap_vld : OUT STD_LOGIC;
    U_014_i : IN STD_LOGIC_VECTOR (31 downto 0);
    U_014_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    U_014_o_ap_vld : OUT STD_LOGIC;
    U_015 : OUT STD_LOGIC_VECTOR (31 downto 0);
    U_015_ap_vld : OUT STD_LOGIC;
    U_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    U_116_i : IN STD_LOGIC_VECTOR (31 downto 0);
    U_116_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    U_116_o_ap_vld : OUT STD_LOGIC;
    U_117_i : IN STD_LOGIC_VECTOR (31 downto 0);
    U_117_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    U_117_o_ap_vld : OUT STD_LOGIC;
    U_118 : OUT STD_LOGIC_VECTOR (31 downto 0);
    U_118_ap_vld : OUT STD_LOGIC;
    U_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    U_219_i : IN STD_LOGIC_VECTOR (31 downto 0);
    U_219_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    U_219_o_ap_vld : OUT STD_LOGIC;
    U_220_i : IN STD_LOGIC_VECTOR (31 downto 0);
    U_220_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    U_220_o_ap_vld : OUT STD_LOGIC;
    U_221 : OUT STD_LOGIC_VECTOR (31 downto 0);
    U_221_ap_vld : OUT STD_LOGIC;
    U_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    U_322_i : IN STD_LOGIC_VECTOR (31 downto 0);
    U_322_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    U_322_o_ap_vld : OUT STD_LOGIC;
    U_323_i : IN STD_LOGIC_VECTOR (31 downto 0);
    U_323_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    U_323_o_ap_vld : OUT STD_LOGIC;
    U_324 : OUT STD_LOGIC_VECTOR (31 downto 0);
    U_324_ap_vld : OUT STD_LOGIC;
    k : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of axi4_lu_forward_process_U_row is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_read_read_fu_110_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_387_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_reg_599 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_395_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_409_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_423_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_addr_reg_642 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln53_fu_465_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln53_reg_650 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln56_fu_474_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln56_reg_655 : STD_LOGIC_VECTOR (1 downto 0);
    signal U_013_read_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_014_read_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_116_read_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_117_read_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_219_read_reg_680 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_220_read_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_322_read_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_323_read_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln56_fu_486_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln56_reg_703 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_492_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_553_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal A_load_reg_728 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_reg_338 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln53_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln60_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_106 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln53_fu_576_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_361_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln60_fu_445_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln60_fu_449_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln56_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_492_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_509_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_520_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_531_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_542_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_509_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_520_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_531_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_542_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_553_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln56_1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal tmp_fu_492_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_492_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_492_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_553_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_553_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_553_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_553_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component axi4_lu_forward_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axi4_lu_forward_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axi4_lu_forward_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axi4_lu_forward_sparsemux_7_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axi4_lu_forward_sparsemux_9_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    faddfsub_32ns_32ns_32_5_full_dsp_1_U19 : component axi4_lu_forward_faddfsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_361_p0,
        din1 => grp_fu_361_p1,
        opcode => grp_fu_361_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_361_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U20 : component axi4_lu_forward_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_708,
        din1 => tmp_1_reg_713,
        ce => ap_const_logic_1,
        dout => grp_fu_379_p2);

    mux_4_2_32_1_1_U21 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_2_fu_395_p1,
        din1 => p_read,
        din2 => p_read1,
        din3 => p_read2,
        din4 => k,
        dout => tmp_2_fu_395_p6);

    mux_4_2_32_1_1_U22 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_3_fu_409_p1,
        din1 => p_read3,
        din2 => p_read4,
        din3 => p_read5,
        din4 => k,
        dout => tmp_3_fu_409_p6);

    mux_4_2_32_1_1_U23 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_4_fu_423_p1,
        din1 => p_read6,
        din2 => p_read7,
        din3 => p_read8,
        din4 => k,
        dout => tmp_4_fu_423_p6);

    sparsemux_7_2_32_1_1_U24 : component axi4_lu_forward_sparsemux_7_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_2_reg_604,
        din1 => tmp_3_reg_609,
        din2 => tmp_4_reg_614,
        def => tmp_fu_492_p7,
        sel => p_reg_338,
        dout => tmp_fu_492_p9);

    mux_4_2_32_1_1_U25 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => U_0,
        din1 => U_013_read_reg_660,
        din2 => U_014_read_reg_665,
        din3 => tmp_5_fu_509_p4,
        din4 => p_reg_338,
        dout => tmp_5_fu_509_p6);

    mux_4_2_32_1_1_U26 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => U_1,
        din1 => U_116_read_reg_670,
        din2 => U_117_read_reg_675,
        din3 => tmp_6_fu_520_p4,
        din4 => p_reg_338,
        dout => tmp_6_fu_520_p6);

    mux_4_2_32_1_1_U27 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => U_2,
        din1 => U_219_read_reg_680,
        din2 => U_220_read_reg_685,
        din3 => tmp_7_fu_531_p4,
        din4 => p_reg_338,
        dout => tmp_7_fu_531_p6);

    mux_4_2_32_1_1_U28 : component axi4_lu_forward_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => U_3,
        din1 => U_322_read_reg_690,
        din2 => U_323_read_reg_695,
        din3 => tmp_8_fu_542_p4,
        din4 => p_reg_338,
        dout => tmp_8_fu_542_p6);

    sparsemux_9_2_32_1_1_U29 : component axi4_lu_forward_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_5_fu_509_p6,
        din1 => tmp_6_fu_520_p6,
        din2 => tmp_7_fu_531_p6,
        din3 => tmp_8_fu_542_p6,
        def => tmp_1_fu_553_p9,
        sel => trunc_ln53_reg_650,
        dout => tmp_1_fu_553_p11);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_fu_106 <= idxprom_fu_383_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_fu_106 <= add_ln53_fu_576_p2;
            end if; 
        end if;
    end process;

    p_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln53_fu_459_p2 = ap_const_lv1_0))) then 
                p_reg_338 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_reg_338 <= add_ln56_reg_703;
            end if; 
        end if;
    end process;

    sum_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln53_fu_459_p2 = ap_const_lv1_0))) then 
                sum_reg_349 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                sum_reg_349 <= grp_fu_361_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                A_addr_reg_642 <= zext_ln60_fu_454_p1(4 - 1 downto 0);
                U_013_read_reg_660 <= U_013_i;
                U_014_read_reg_665 <= U_014_i;
                U_116_read_reg_670 <= U_116_i;
                U_117_read_reg_675 <= U_117_i;
                U_219_read_reg_680 <= U_219_i;
                U_220_read_reg_685 <= U_220_i;
                U_322_read_reg_690 <= U_322_i;
                U_323_read_reg_695 <= U_323_i;
                select_ln56_reg_655 <= select_ln56_fu_474_p3;
                trunc_ln53_reg_650 <= trunc_ln53_fu_465_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                A_load_reg_728 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln56_reg_703 <= add_ln56_fu_486_p2;
                tmp_1_reg_713 <= tmp_1_fu_553_p11;
                tmp_reg_708 <= tmp_fu_492_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_reg_718 <= grp_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_2_reg_604 <= tmp_2_fu_395_p6;
                tmp_3_reg_609 <= tmp_3_fu_409_p6;
                tmp_4_reg_614 <= tmp_4_fu_423_p6;
                    tmp_9_reg_599(3 downto 2) <= tmp_9_fu_387_p3(3 downto 2);
            end if;
        end if;
    end process;
    tmp_9_reg_599(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln53_fu_459_p2, icmp_ln56_1_fu_481_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln53_fu_459_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln56_1_fu_481_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= A_addr_reg_642;

    A_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_013_o_assign_proc : process(U_013_i, k_read_read_fu_110_p2, trunc_ln53_reg_650, grp_fu_361_p2, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_0))) then 
            U_013_o <= grp_fu_361_p2;
        else 
            U_013_o <= U_013_i;
        end if; 
    end process;


    U_013_o_ap_vld_assign_proc : process(k_read_read_fu_110_p2, trunc_ln53_reg_650, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_0))) then 
            U_013_o_ap_vld <= ap_const_logic_1;
        else 
            U_013_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    U_014_o_assign_proc : process(U_014_i, k_read_read_fu_110_p2, trunc_ln53_reg_650, grp_fu_361_p2, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_0))) then 
            U_014_o <= grp_fu_361_p2;
        else 
            U_014_o <= U_014_i;
        end if; 
    end process;


    U_014_o_ap_vld_assign_proc : process(k_read_read_fu_110_p2, trunc_ln53_reg_650, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_0))) then 
            U_014_o_ap_vld <= ap_const_logic_1;
        else 
            U_014_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    U_015 <= grp_fu_361_p2;

    U_015_ap_vld_assign_proc : process(k_read_read_fu_110_p2, trunc_ln53_reg_650, ap_CS_fsm_state18)
    begin
        if ((not((k_read_read_fu_110_p2 = ap_const_lv2_2)) and not((k_read_read_fu_110_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_0))) then 
            U_015_ap_vld <= ap_const_logic_1;
        else 
            U_015_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    U_116_o_assign_proc : process(U_116_i, k_read_read_fu_110_p2, trunc_ln53_reg_650, grp_fu_361_p2, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_1))) then 
            U_116_o <= grp_fu_361_p2;
        else 
            U_116_o <= U_116_i;
        end if; 
    end process;


    U_116_o_ap_vld_assign_proc : process(k_read_read_fu_110_p2, trunc_ln53_reg_650, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_1))) then 
            U_116_o_ap_vld <= ap_const_logic_1;
        else 
            U_116_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    U_117_o_assign_proc : process(U_117_i, k_read_read_fu_110_p2, trunc_ln53_reg_650, grp_fu_361_p2, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_1))) then 
            U_117_o <= grp_fu_361_p2;
        else 
            U_117_o <= U_117_i;
        end if; 
    end process;


    U_117_o_ap_vld_assign_proc : process(k_read_read_fu_110_p2, trunc_ln53_reg_650, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_1))) then 
            U_117_o_ap_vld <= ap_const_logic_1;
        else 
            U_117_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    U_118 <= grp_fu_361_p2;

    U_118_ap_vld_assign_proc : process(k_read_read_fu_110_p2, trunc_ln53_reg_650, ap_CS_fsm_state18)
    begin
        if ((not((k_read_read_fu_110_p2 = ap_const_lv2_2)) and not((k_read_read_fu_110_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_1))) then 
            U_118_ap_vld <= ap_const_logic_1;
        else 
            U_118_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    U_219_o_assign_proc : process(U_219_i, k_read_read_fu_110_p2, trunc_ln53_reg_650, grp_fu_361_p2, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_2))) then 
            U_219_o <= grp_fu_361_p2;
        else 
            U_219_o <= U_219_i;
        end if; 
    end process;


    U_219_o_ap_vld_assign_proc : process(k_read_read_fu_110_p2, trunc_ln53_reg_650, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_2))) then 
            U_219_o_ap_vld <= ap_const_logic_1;
        else 
            U_219_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    U_220_o_assign_proc : process(U_220_i, k_read_read_fu_110_p2, trunc_ln53_reg_650, grp_fu_361_p2, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_2))) then 
            U_220_o <= grp_fu_361_p2;
        else 
            U_220_o <= U_220_i;
        end if; 
    end process;


    U_220_o_ap_vld_assign_proc : process(k_read_read_fu_110_p2, trunc_ln53_reg_650, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_2))) then 
            U_220_o_ap_vld <= ap_const_logic_1;
        else 
            U_220_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    U_221 <= grp_fu_361_p2;

    U_221_ap_vld_assign_proc : process(k_read_read_fu_110_p2, trunc_ln53_reg_650, ap_CS_fsm_state18)
    begin
        if ((not((k_read_read_fu_110_p2 = ap_const_lv2_2)) and not((k_read_read_fu_110_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_2))) then 
            U_221_ap_vld <= ap_const_logic_1;
        else 
            U_221_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    U_322_o_assign_proc : process(U_322_i, k_read_read_fu_110_p2, trunc_ln53_reg_650, grp_fu_361_p2, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_3))) then 
            U_322_o <= grp_fu_361_p2;
        else 
            U_322_o <= U_322_i;
        end if; 
    end process;


    U_322_o_ap_vld_assign_proc : process(k_read_read_fu_110_p2, trunc_ln53_reg_650, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_3))) then 
            U_322_o_ap_vld <= ap_const_logic_1;
        else 
            U_322_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    U_323_o_assign_proc : process(U_323_i, k_read_read_fu_110_p2, trunc_ln53_reg_650, grp_fu_361_p2, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_3))) then 
            U_323_o <= grp_fu_361_p2;
        else 
            U_323_o <= U_323_i;
        end if; 
    end process;


    U_323_o_ap_vld_assign_proc : process(k_read_read_fu_110_p2, trunc_ln53_reg_650, ap_CS_fsm_state18)
    begin
        if (((k_read_read_fu_110_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_3))) then 
            U_323_o_ap_vld <= ap_const_logic_1;
        else 
            U_323_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    U_324 <= grp_fu_361_p2;

    U_324_ap_vld_assign_proc : process(k_read_read_fu_110_p2, trunc_ln53_reg_650, ap_CS_fsm_state18)
    begin
        if ((not((k_read_read_fu_110_p2 = ap_const_lv2_2)) and not((k_read_read_fu_110_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state18) and (trunc_ln53_reg_650 = ap_const_lv2_3))) then 
            U_324_ap_vld <= ap_const_logic_1;
        else 
            U_324_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln53_fu_576_p2 <= std_logic_vector(unsigned(j_fu_106) + unsigned(ap_const_lv64_1));
    add_ln56_fu_486_p2 <= std_logic_vector(unsigned(p_reg_338) + unsigned(ap_const_lv2_1));
    add_ln60_fu_449_p2 <= std_logic_vector(unsigned(tmp_9_reg_599) + unsigned(trunc_ln60_fu_445_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln53_fu_459_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln53_fu_459_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln53_fu_459_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln53_fu_459_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_361_opcode_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_361_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_361_opcode <= ap_const_lv2_0;
        else 
            grp_fu_361_opcode <= "XX";
        end if; 
    end process;


    grp_fu_361_p0_assign_proc : process(A_load_reg_728, sum_reg_349, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_361_p0 <= A_load_reg_728;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_361_p0 <= sum_reg_349;
        else 
            grp_fu_361_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_361_p1_assign_proc : process(mul_reg_718, sum_reg_349, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_361_p1 <= sum_reg_349;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_361_p1 <= mul_reg_718;
        else 
            grp_fu_361_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln53_fu_459_p2 <= "1" when (j_fu_106 = ap_const_lv64_4) else "0";
    icmp_ln56_1_fu_481_p2 <= "1" when (p_reg_338 = select_ln56_reg_655) else "0";
    icmp_ln56_fu_469_p2 <= "0" when (k = ap_const_lv2_0) else "1";
    idxprom_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k),64));
    k_read_read_fu_110_p2 <= k;
    select_ln56_fu_474_p3 <= 
        k when (icmp_ln56_fu_469_p2(0) = '1') else 
        ap_const_lv2_1;
    tmp_1_fu_553_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_2_fu_395_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_3_fu_409_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_4_fu_423_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_5_fu_509_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_6_fu_520_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_7_fu_531_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_8_fu_542_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_9_fu_387_p3 <= (k & ap_const_lv2_0);
    tmp_fu_492_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln53_fu_465_p1 <= j_fu_106(2 - 1 downto 0);
    trunc_ln60_fu_445_p1 <= j_fu_106(4 - 1 downto 0);
    zext_ln60_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_fu_449_p2),64));
end behav;
