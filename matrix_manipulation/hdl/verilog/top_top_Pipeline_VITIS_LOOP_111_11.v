// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_top_Pipeline_VITIS_LOOP_111_11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        matC_sub_m_nElements,
        matB_m_matrix_Data_address0,
        matB_m_matrix_Data_ce0,
        matB_m_matrix_Data_we0,
        matB_m_matrix_Data_d0,
        localB,
        localB_1,
        localB_2,
        localB_3,
        localB_4,
        localB_5,
        localB_6,
        localB_7,
        localB_8,
        localB_9,
        localB_10,
        localB_11,
        localB_12,
        localB_13,
        localB_14,
        localB_15
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] matC_sub_m_nElements;
output  [3:0] matB_m_matrix_Data_address0;
output   matB_m_matrix_Data_ce0;
output   matB_m_matrix_Data_we0;
output  [31:0] matB_m_matrix_Data_d0;
input  [31:0] localB;
input  [31:0] localB_1;
input  [31:0] localB_2;
input  [31:0] localB_3;
input  [31:0] localB_4;
input  [31:0] localB_5;
input  [31:0] localB_6;
input  [31:0] localB_7;
input  [31:0] localB_8;
input  [31:0] localB_9;
input  [31:0] localB_10;
input  [31:0] localB_11;
input  [31:0] localB_12;
input  [31:0] localB_13;
input  [31:0] localB_14;
input  [31:0] localB_15;

reg ap_idle;
reg matB_m_matrix_Data_ce0;
reg matB_m_matrix_Data_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln111_fu_225_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln111_1_fu_237_p1;
reg   [4:0] i_1_fu_94;
wire   [4:0] add_ln111_fu_231_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i;
wire   [31:0] tmp_1_fu_246_p35;
wire   [31:0] zext_ln111_fu_221_p1;
wire   [31:0] tmp_1_fu_246_p33;
wire   [3:0] tmp_1_fu_246_p34;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire   [3:0] tmp_1_fu_246_p1;
wire   [3:0] tmp_1_fu_246_p3;
wire   [3:0] tmp_1_fu_246_p5;
wire   [3:0] tmp_1_fu_246_p7;
wire   [3:0] tmp_1_fu_246_p9;
wire   [3:0] tmp_1_fu_246_p11;
wire   [3:0] tmp_1_fu_246_p13;
wire   [3:0] tmp_1_fu_246_p15;
wire  signed [3:0] tmp_1_fu_246_p17;
wire  signed [3:0] tmp_1_fu_246_p19;
wire  signed [3:0] tmp_1_fu_246_p21;
wire  signed [3:0] tmp_1_fu_246_p23;
wire  signed [3:0] tmp_1_fu_246_p25;
wire  signed [3:0] tmp_1_fu_246_p27;
wire  signed [3:0] tmp_1_fu_246_p29;
wire  signed [3:0] tmp_1_fu_246_p31;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i_1_fu_94 = 5'd0;
#0 ap_done_reg = 1'b0;
end

top_sparsemux_33_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 32 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 32 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_33_4_32_1_1_U21(
    .din0(localB),
    .din1(localB_1),
    .din2(localB_2),
    .din3(localB_3),
    .din4(localB_4),
    .din5(localB_5),
    .din6(localB_6),
    .din7(localB_7),
    .din8(localB_8),
    .din9(localB_9),
    .din10(localB_10),
    .din11(localB_11),
    .din12(localB_12),
    .din13(localB_13),
    .din14(localB_14),
    .din15(localB_15),
    .def(tmp_1_fu_246_p33),
    .sel(tmp_1_fu_246_p34),
    .dout(tmp_1_fu_246_p35)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln111_fu_225_p2 == 1'd1)) begin
            i_1_fu_94 <= add_ln111_fu_231_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_94 <= 5'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln111_fu_225_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 5'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        matB_m_matrix_Data_ce0 = 1'b1;
    end else begin
        matB_m_matrix_Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln111_fu_225_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        matB_m_matrix_Data_we0 = 1'b1;
    end else begin
        matB_m_matrix_Data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln111_fu_231_p2 = (ap_sig_allocacmp_i + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln111_fu_225_p2 = (($signed(zext_ln111_fu_221_p1) < $signed(matC_sub_m_nElements)) ? 1'b1 : 1'b0);

assign matB_m_matrix_Data_address0 = zext_ln111_1_fu_237_p1;

assign matB_m_matrix_Data_d0 = tmp_1_fu_246_p35;

assign tmp_1_fu_246_p33 = 'bx;

assign tmp_1_fu_246_p34 = ap_sig_allocacmp_i[3:0];

assign zext_ln111_1_fu_237_p1 = ap_sig_allocacmp_i;

assign zext_ln111_fu_221_p1 = ap_sig_allocacmp_i;

endmodule //top_top_Pipeline_VITIS_LOOP_111_11
